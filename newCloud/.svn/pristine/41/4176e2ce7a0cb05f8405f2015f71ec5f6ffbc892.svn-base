package com.broadeast.util;
 
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;

import org.apache.log4j.Logger;

import sun.misc.BASE64Decoder;

import com.aliyun.oss.OSSClient;
import com.aliyun.oss.model.AppendObjectRequest;
import com.aliyun.oss.model.AppendObjectResult;
import com.aliyun.oss.model.DeleteObjectsRequest;
import com.aliyun.oss.model.DeleteObjectsResult;
import com.aliyun.oss.model.GeneratePresignedUrlRequest;
import com.aliyun.oss.model.ListObjectsRequest;
import com.aliyun.oss.model.OSSObject;
import com.aliyun.oss.model.OSSObjectSummary;
import com.aliyun.oss.model.ObjectListing;
import com.aliyun.oss.model.ObjectMetadata;
import com.aliyun.oss.model.PutObjectResult;

public class OssManage {
	private static Logger logger = Logger.getLogger(OssManage.class);
    public static  String ACCESS_KEY_ID  = null;//秘密钥匙
    public static  String  ACCESS_KEY_SECRET = null;//秘密钥匙
    public static  String  ENDPOINT = null;  //访问url
    public static  String  BUCKETNAME = null; // 访问空间
    public static  String  OUT_OF_DATE = null;//到期时间
    private  OSSClient client  = null;
    private  ObjectMetadata meta = null;
    static{
    	try {
    		ResourceBundle rb = ResourceBundle.getBundle("commen", Locale.getDefault()); 
			ACCESS_KEY_ID = rb.getString("access_key_id");
			ACCESS_KEY_SECRET = rb.getString("access_key_secret");
			//不能在endpoint前加上BUCKETNAME  如下url错误
            //ENDPOINT =  "http://realnameauth.oss-cn-shanghai-internal.aliyuncs.com";
			ENDPOINT = rb.getString("endpoint");
			BUCKETNAME = rb.getString("bucketname");
			OUT_OF_DATE = rb.getString("out_of_date");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("加载配置文件失败",e);
		}
    }
    /**
     * @Description  初始化ossClient
     */
    public void init(){
    	try {
    		client = new OSSClient(ENDPOINT,ACCESS_KEY_ID, ACCESS_KEY_SECRET);
    		meta = new ObjectMetadata();
    		 
		} catch (Exception e) {
			 logger.error("OSS连接失败",e);
		}
    }
     
 /**
  * @param content  文件流
  * @param key      服务器的唯一标示
  * @param mimeType    文件类型
  * @return
  */
    public String uploadFile(InputStream content,String key,String mimeType) throws Exception{
    	try {
    		init();
    		// 必须设置ContentLength
    		meta.setContentType(mimeType);
    		meta.setContentLength(content.available());
    		meta.setCacheControl("no-cache"); 
    		// 上传Object.
    		PutObjectResult result = client.putObject(BUCKETNAME, key, content, meta);
    		return result.getETag();
		} catch (Exception e) {
			logger.error("上传文件失败==method==uploadFile",e);
			return null;
		}finally{
			if(content!=null){
				content.close();
			}
			client.shutdown();
		}
    }
     
 
 
    /**
     * @Description: 根据key获取oss服务器上的图片地址
     * @param key  服务器唯一标示
     * @param bucketName 访问空间
     * @return 
     * @ReturnType:String
    */
    public String getImgURl(String bucketName, String key){
        Date expires = new Date (new Date().getTime() + Integer.parseInt(OUT_OF_DATE)); // 30 minute to expire
        GeneratePresignedUrlRequest generatePresignedUrlRequest =null;
        try {
        	init();
        	generatePresignedUrlRequest = new GeneratePresignedUrlRequest(bucketName, key);
        	generatePresignedUrlRequest.setExpiration(expires);
        	URL url = client.generatePresignedUrl(generatePresignedUrlRequest);
        	return  url.toString();
		} catch (Exception e) {
			logger.error("根据key获取oss服务器上的图片地址获得失败",e);
			return null;
		}finally{
			client.shutdown();
		}
       
    }
    /**
     * @Description:根据key获取oss服务器上的ipa文件地址
     * @param key
     * @return 
     * @ReturnType:String
     */
    public String getIpaURl(String key){
        Date expires = new Date(new Date().getTime()+ 10*365*24*3600*1000);
        GeneratePresignedUrlRequest generatePresignedUrlRequest =null;
        try {
        	 init();
        	 generatePresignedUrlRequest =new GeneratePresignedUrlRequest(BUCKETNAME, key);
        	 generatePresignedUrlRequest.setExpiration(expires);
             URL url = client.generatePresignedUrl(generatePresignedUrlRequest);
             return url.toString();
		} catch (Exception e) {
			logger.error("根据key获取oss服务器上的ipa文件地址失败",e);
			return null;
		}finally{
			client.shutdown();
		}
    }
     
    /**
     * @Description: 根据key获取oss服务器上的图片流
     * @param key
     * @return 
     * @ReturnType:String
    */
    public InputStream  getObject(String key){
        OSSObject object = null;
        try {
        	 init();
        	 object= client.getObject(BUCKETNAME, key);
        	 object.getObjectMetadata().getContentType();
             InputStream objectContent = object.getObjectContent();
             return objectContent;
		} catch (Exception e) {
			logger.error("根据key获取oss服务器上的图片流失败",e);
			return null;
		}finally{
			client.shutdown();
		}
        
    }
     
     
    /**
     * @Description:删除文件
     * @param key  
     * @ReturnType:void
    */
    public void deleteFileByKey(String key){
    	try {
    		init();
    		client.deleteObject(BUCKETNAME, key);
		} catch (Exception e) {
			logger.error("根据key删除oss服务区上的文件失败",e);
		}finally{
			client.shutdown();
		}
    }
     
     
    /**
     * @Description: 断点上传文件到OSS文件服务器
     * @param content  文件流
     * @param key    上传为OSS文件服务器的唯一标识
     * @param position 位置
    */
    public String  appendObjectFile(InputStream content,String key,int position,String mimeType) throws Exception{
            meta.setContentLength(position);
            meta.setContentType(mimeType);
            meta.setCacheControl("no-cache");
            meta.setContentEncoding("utf-8");
            // 上传
            try {
            	init();
            	AppendObjectRequest appendObjectRequest = new AppendObjectRequest(BUCKETNAME, key, content, meta);
            	appendObjectRequest.setPosition(Long.valueOf(position));
            	AppendObjectResult appendObjectResult =client.appendObject(appendObjectRequest);
            	return appendObjectResult.getNextPosition().toString();
			} catch (Exception e) {
				logger.error("断点上传文件到OSS文件服务器失败",e);
				return null;
			}finally{
				client.shutdown();
			}
    }
    /**
     * @Description  获得<BUCKETNAME>下的所有的key 后期需要改造 key
     * keyPrefix = null 说明没有命名空间直接获得<BUCKETNAME>下的key
     * keyPrefix!=null  说明有命名空间
     * @return 
     */
	public  List<String> getFileKeys(String keyPrefix){
    	List<String> list = new ArrayList<String>();
		try {
			init();
			ObjectListing objectListing = null;
			String nextMarker = null;
			final int maxKeys = 30;
			do {
				objectListing = client.listObjects(new ListObjectsRequest(BUCKETNAME).withMarker(nextMarker).withMaxKeys(maxKeys));
				List<OSSObjectSummary> sums = objectListing.getObjectSummaries();
				if (keyPrefix != null) {
				    for (OSSObjectSummary s : sums) {
				    	if(s.getKey().indexOf("/")>0){
						String kyes = s.getKey().substring(0,s.getKey().indexOf("/"));
						if (keyPrefix.equals(kyes)) {
							String key = s.getKey().substring(s.getKey().lastIndexOf("/") + 1);
							//判断是"/"是否有空值
							if (!"".equals(key)) {
								list.add(s.getKey());
							 }
						  }	
				       }
					} 
				}else{
					for (OSSObjectSummary s : sums) {
				    	if(s.getKey().indexOf("/")<0){
						    list.add(s.getKey());
				    	}
					}
				}
			   nextMarker = objectListing.getNextMarker();
			} while (objectListing.isTruncated());
			return list;
		} catch (Exception e) {
			return null;
		} finally {
			client.shutdown();
		}
    }
	public static void main(String[] args) throws Exception {
//		System.out.println("abcfsdf.jpg".substring(0,"abcfsdf.jpg".indexOf(".jpg")));
		
//		OssManage oss = new OssManage();
//		oss.init();
		/*************test by:cuimiao********************/
		//TODO
		//上传图片  测试通过
		/**
		File file = new File("D://test.jpg");
		try {
		InputStream content = new FileInputStream(file);
		
			oss.uploadFile(content, "user_picture/testByCm.jpg", "image/jpeg");
		} catch (Exception e) {
			e.printStackTrace();
		}
		*/
		//测试创建目录并上传  测试通过
		/**
		File file = new File("D://test.jpg");
		try {
		InputStream content = new FileInputStream(file);
		
			oss.uploadFile(content, "school_pic/testByCm1.jpg", "image/jpeg");
		} catch (Exception e) {
			e.printStackTrace();
		}
		*/
		//测试上传并覆盖  测试成功
		/**
		File file = new File("D://test02.jpg");
		try {
		InputStream content = new FileInputStream(file);
		
			oss.uploadFile(content, "school_pic/testByCm1.jpg", "image/jpeg");
		} catch (Exception e) {
			e.printStackTrace();
		}
		*/
		File file = new File("D://test03.jpg");
		InputStream content = new FileInputStream(file);

		OssManage oss = new OssManage();
//		o.init();
		oss.uploadFileForBanner(content,"image/jpeg","37");
		
//		OssManage manage = new OssManage();
//		manage.testByCm();
		
		
//		oss.deleteFileByKey("school_pic/testByCm1.jpg");
//		List<String> list = oss.getFileKeys("user_picture");
//		for (int i = 0; i < list.size(); i++) {
//			System.out.println(list.get(i));
//			oss.deleteFileByKey(list.get(i));
//		}
//		oss.deleteFileByKey("5501455938709037.jpg");
//		oss.deleteFileByKey("6461455938708772.jpg");
	}
    /**
     * @Description  批量删除BUCKETNAME下的所有文件
     * @param keys BUCKETNAME下的文件名的集合
     * @return
     */
    public boolean deleteFileByKeys(List<String> keys){
    	 boolean flag = false;
    	 try {
    		 init();
    		 DeleteObjectsResult result = client.deleteObjects(
    				 new DeleteObjectsRequest(BUCKETNAME).withKeys(keys));
    		 //获得删除的所有key的集合,就是文件名的集合
    		 //List<String> deleteObject = deleteObjectsResult.getDeletedObjects();
			 flag = true;
		} catch (Exception e) {
			 flag = false;
		}finally{
			client.shutdown();
		}
    	 return flag;
    }
    
    //
    public void testByCm(){
    	
    	//初始化client
    	client = new OSSClient(ENDPOINT,ACCESS_KEY_ID, ACCESS_KEY_SECRET);
		meta = new ObjectMetadata();
    	
    	String bucketName = "realnameauth";
    	// 构造ListObjectsRequest请求
    	ListObjectsRequest listObjectsRequest = new ListObjectsRequest(bucketName);

    	// "/" 为文件夹的分隔符
    	listObjectsRequest.setDelimiter("/");

    	// 列出fun目录下的所有文件和文件夹
    	listObjectsRequest.setPrefix("school_pic/");

    	ObjectListing listing = client.listObjects(listObjectsRequest);

    	// 遍历所有Object
//    	System.out.println("Objects:");
//    	for (OSSObjectSummary objectSummary : listing.getObjectSummaries()) {
//    	    System.out.println(objectSummary.getKey());
//    	}

    }
    
    /**
     * 删除文件
     * @Description 
     * @param fileName
     */
    public void delFile(String fileName){
    	OssManage oss = new OssManage();
    	oss.deleteFileByKey(fileName);
    }
    
    /**
     * 覆盖上传
     * @Description 
     * @param content
     * @param mimeType
     * @param siteId
     * @param fileName 文件名 无后缀
     */
    public void coverFile(InputStream content,String mimeType,String siteId,String fileName){
    	OssManage oss = new OssManage();
		try {
			oss.uploadFile(content, "school_pic/"+fileName+".jpg", "image/jpeg");
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
    
    /**
     * 图片上传主方法，只能上传三张，多了的话覆盖掉最早上传的一张图片
     * @Description 
     * @param content
     * @param mimeType
     * @param siteId
     * @throws Exception
     */
    public void uploadFileForBanner(InputStream content,String mimeType,String siteId) throws Exception{
    	
    	OssManage oss = new OssManage();
		oss.init();
    	
		try {
			ObjectListing listing = this.getFileList(siteId);
			System.out.println(listing.getObjectSummaries().size());
			if(listing.getObjectSummaries().size() < 3){
				//数量不足三个的时候直接插入
				oss.uploadFile(content, "school_pic/"+siteId+"/"+this.getStringDate()+".jpg", "image/jpeg");
			}else{
				//数量等于3个的时候删除距离现在时间最长的图片，并加入新图片
				//循环获取到文件名（文件名为存入时间）
				String[] fileNames = new String[3];
//				List<Date> dateList = new ArrayList<Date>();
				Date[] createFileDate = new Date[3];
				String prefix = "";
				for (int i = 0 ; i<listing.getObjectSummaries().size() ; i++) {
					String name = listing.getObjectSummaries().get(i).getKey();
					fileNames[i] = name.substring(0,name.indexOf(".jpg"));
					createFileDate[i] = this.parseNameToDate(name, siteId);
//					dateList.add(this.getDateByString(name.substring(0,name.indexOf(".jpg"))));
					prefix = name.substring(0,name.indexOf(siteId+"/"))+siteId+"/";
		    	}
				java.util.Arrays.sort(createFileDate);
				for (int i = 0; i < createFileDate.length; i++) {
					System.out.println(prefix+this.dateToString(createFileDate[i]));
				}
				oss.deleteFileByKey(prefix+this.dateToString(createFileDate[0])+".jpg");
				//上传图片
				oss.uploadFile(content, "school_pic/"+siteId+"/"+this.getStringDate()+".jpg", "image/jpeg");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
//    	uploadFile(content, key, mimeType);
    }
    
    /**
     * 解析文件名为日期
     * @Description 
     * @param name
     * @param siteId
     * @return
     */
    public static Date parseNameToDate(String name,String siteId){
    	return getDateByString(name.substring(name.indexOf(siteId+"/")+(siteId+"/").length(),name.indexOf(".jpg")));
    }
    
    /**
     * 得到文件list
     * @Description 
     * @return
     */
    public ObjectListing getFileList(String siteId){
    	//TODO 初始化client在后期应该移除，统一初始化
    	//初始化client
    	client = new OSSClient(ENDPOINT,ACCESS_KEY_ID, ACCESS_KEY_SECRET);
		meta = new ObjectMetadata();
    	
		//TODO 这里写死了是realnameauth项目，后期改成参数输入
    	String bucketName = "school-pic";
    	
    	// 构造ListObjectsRequest请求
    	ListObjectsRequest listObjectsRequest = new ListObjectsRequest(bucketName);

    	// "/" 为文件夹的分隔符
    	listObjectsRequest.setDelimiter("/");

    	// 列出school_pic目录下的所有文件和文件夹
    	listObjectsRequest.setPrefix("school_pic/"+siteId+"/");

    	ObjectListing listing = client.listObjects(listObjectsRequest);
System.out.println("success");
//    	// 遍历所有Object
//    	System.out.println("Objects:");
//    	for (OSSObjectSummary objectSummary : listing.getObjectSummaries()) {
//    	    System.out.println(objectSummary.getKey());
//    	}
    	return listing;
    }
    
    /**
	 * 当前时间转化为yyyyMMddHHmmss
	 * by:cuimiao
	 * @return
	 */
	public static String getStringDate(){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmss");
		return sdf.format(new Date());
	}
	
	/**
	 * 当前时间转化为yyyyMMddHHmmss
	 * by:cuimiao
	 * @return
	 */
	public static String dateToString(Date date){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmss");
		return sdf.format(date);
	}
	
	
	/**
	 * 将字符串转换为时间
	 * by:cuimiao
	 * @Description 
	 * @param dateStr
	 * @return
	 */
	public static Date getDateByString(String dateStr){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddHHmmss");
		Date date = new Date();
		try {
			date = sdf.parse(dateStr);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return date;
	}
	
	public InputStream getInputStream(String base64String){
		InputStream in = null;
		if(base64String!=null&&!"".equals(base64String)){
			String formateStr = base64String.substring(base64String.indexOf("base64")+7);
			BASE64Decoder decoder = new BASE64Decoder();
	        try {
	            // Base64解码
	            byte[] bytes = decoder.decodeBuffer(formateStr);
	            for (int i = 0; i < bytes.length; ++i) {
	                if (bytes[i] < 0) {// 调整异常数据
	                    bytes[i] += 256;
	                }
	            }
	            in = new ByteArrayInputStream(bytes);
	        } catch (Exception e) {
	        	logger.error(this.getClass().getCanonicalName()+"获得输入流失败",e);
	        }
		} 
		return in;
	}
     
}