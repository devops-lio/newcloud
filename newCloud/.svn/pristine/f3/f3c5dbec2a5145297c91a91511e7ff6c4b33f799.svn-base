package com.broadeast.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.annotation.Resource;
import javax.xml.crypto.Data;

import org.apache.log4j.Logger;
import org.nutz.dao.Cnd;
import org.nutz.dao.Dao;

import com.broadeast.entity.SiteCustomerInfo;
import com.broadeast.service.impl.UserServiceImpl;

public class DateUtil {
	private static Logger log=Logger.getLogger(UserServiceImpl.class);
	@Resource
	private static UserServiceImpl usi;
	
	
	/**
	 * 获取小时数和分钟数拼接后转换为int 列子：2014-09-23 08:32:54-->832
	 * @return
	 */
	public static int getHHMMInt(){
		SimpleDateFormat sdf=new SimpleDateFormat("HHmm");
		String str=sdf.format(new Date());
		return Integer.parseInt(str);
	}
	
	/**
	 * 当前时间转化为yyyy-MM-dd HH:mm:ss
	 * @return
	 */
	public static String getStringDate(){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(new Date());
	}
	
	/**
	 * 给定date时间转化为yyyy-MM-dd HH:mm:ss,可能为null
	 * @return 
	 */
	public static String getStringDate(Date date){
		if(date==null){return null;}
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(date);
	}
	
	/**
	 * 字符串时间转化为Date
	 * @param str
	 * @return
	 */
	public static Date getDateFromString(String str){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			return sdf.parse(str);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 日期加减
	 * 0按小时收费；1按天;2按月
	 */
	public static String datePlus(int type,int num){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar now=Calendar.getInstance();
		if(type==0){//0按小时
			now.add(Calendar.HOUR, num);
			
		}else if(type==1){//1按天
			now.add(Calendar.DAY_OF_YEAR, num);
		}else if(type==2){//2按月
			now.add(Calendar.MONTH, num);
		}else if(type==3){//按一年
			now.add(Calendar.YEAR, num);
			
		}else if(type==4){//按两年
			now.add(Calendar.YEAR, num*2);
		}
		return sdf.format(now.getTime());
	}
	
	
	/**
	 * 日期加减
	 * 0按小时收费；1按天;2按月
	 */
	public static String datePlus(int type,int num,String priceNum){
		
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar now=Calendar.getInstance();
		System.out.println(sdf.format(now.getTime()));
			if(type==0){//0按小时
				
				now.add(Calendar.HOUR, num*Integer.parseInt(priceNum));
			}else if(type==1){//1按天
				
				now.add(Calendar.DAY_OF_YEAR, num*Integer.parseInt(priceNum));
			}else if(type==2){
				
				now.add(Calendar.MONTH, num*Integer.parseInt(priceNum));
			}
		return sdf.format(now.getTime());
	}
	
	
	/**
	 * 根据到期时间和当前时间比较判断日期加减
	 * 0按小时收费；1按天;2按月
	 */
	public static String datePluss(int type,int num,String data){
//		System.out.println(type);
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar now=Calendar.getInstance();
		try {
			Date test = sdf.parse(data);
			now.setTime(test);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		if(type==0){//0按小时
			now.add(Calendar.HOUR, num);
			
		}else if(type==1){//1按天
			now.add(Calendar.DAY_OF_YEAR, num);
		}else if(type==2){//2按月
			now.add(Calendar.MONTH, num);
		}else if(type==3){//按一年
			now.add(Calendar.YEAR, num);
			
		}else if(type==4){//按两年
			now.add(Calendar.YEAR, num*2);
		}
		return sdf.format(now.getTime());
	}
	
	/**
	 * 根据到期时间和当前时间比较判断日期加减
	 * 0按小时收费；1按天;2按月
	 */
	public static String newDatePluss(int type,int num,String data,String priceNum){
		int nums=Integer.parseInt(priceNum);
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar now=Calendar.getInstance();
		System.out.println(sdf.format(now.getTime()));
		try {
			Date test = sdf.parse(data);
			now.setTime(test);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		if(type==0){//0按小时
			now.add(Calendar.HOUR, num*nums);
				
		}else if(type==1){//1按天
			now.add(Calendar.DAY_OF_YEAR, num*nums);
		}else if(type==2){//2按月
			now.add(Calendar.MONTH, num*nums);
		}
		
		return sdf.format(now.getTime());
	}
	
	
	public static void main(String[] args) {
		
		System.out.println(getHHMMInt());
		
		
	}

}
