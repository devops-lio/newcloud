package com.broadeast.controller;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.broadeast.bean.AjaxPageBean;
import com.broadeast.bean.ChurnUserBean;
import com.broadeast.bean.UserInfoBean;
import com.broadeast.entity.CloudSite;
import com.broadeast.entity.CloudUser;
import com.broadeast.entity.PortalUser;
import com.broadeast.entity.SiteCustomerInfo;
import com.broadeast.entity.SiteIncome;
import com.broadeast.entity.SitePaymentRecord;
import com.broadeast.entity.SitePriceConfig;
import com.broadeast.entity.UserLock;
import com.broadeast.service.impl.CloudSiteServiceImpl;
import com.broadeast.service.impl.SiteCustomerInfoServiceImpl;
import com.broadeast.service.impl.SiteCustomerServiceImpl;
import com.broadeast.service.impl.SitePriceConfigServiceImpl;
import com.broadeast.service.impl.UserServiceImpl;
import com.broadeast.util.BigDecimalUtil;
import com.broadeast.util.DateUtil;
import com.broadeast.util.ExecuteResult;
import com.broadeast.util.ExportExcelUtils;
import com.broadeast.util.MD5;
import com.broadeast.util.SHA256;
import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;


/**
 * @ToDoWhat  用户管理操作，查询场所注册用户，消费统计等
 * @author xyzhang
 */
@Controller
@RequestMapping("/siteCustomer")
public class SiteCustomerInfoController{
	
	@Autowired
	public UserServiceImpl userServiceImpl;
	@Autowired
	public SiteCustomerInfoServiceImpl infoServiceImpl;
	@Autowired
	public SitePriceConfigServiceImpl  sitePriceConfigServiceImpl;
	@Autowired 
	public SiteCustomerServiceImpl siteCustomerServiceImpl;
	@Autowired 
	public CloudSiteServiceImpl cloudSiteServiceImpl;
	@Autowired
	public UserServiceImpl userserviceimpl;
	@RequestMapping("toSiteCustomerList")
	public String toSiteCustomerList(HttpSession session,Model model){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		 List<Map<String, Object>>  list=sitePriceConfigServiceImpl.getUserSiet(userId);
		 model.addAttribute("siteList",list);
		 return "/siteCustomer/cloudUserList";
	}
	/**
	 * 到用户管理下的   缴费/解锁/停用  的页面
	 * @param session
	 * @param model
	 * @return  cloudUserList
	 */
	@RequestMapping("toCustomerPay")
	public String toCustomerPay(HttpSession session,Model model){
		int userId = ((CloudUser)session.getAttribute("user")).getId();
		List<Map<String,Object>> list = sitePriceConfigServiceImpl.getUserSiet(userId);
		model.addAttribute("siteList",list);
		return "/siteCustomer/customerPay";
	}
	@RequestMapping("toAutoUserName")
	public String toAutoUserName(HttpSession session,Model model){
//		int userId = ((CloudUser)session.getAttribute("user")).getId();
//		List<Map<String,Object>> list = sitePriceConfigServiceImpl.getUserSiet(userId);
//		model.addAttribute("siteList",list);
		return "/siteCustomer/autoUserName";
	}
	
	
	@RequestMapping("toChurnUserList")
	public String toChurnUserList(HttpSession session,Model model){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		 List<Map<String, Object>>  list=sitePriceConfigServiceImpl.getUserSiet(userId);
		 model.addAttribute("siteList",list);
		 return "/siteCustomer/churnUser";
	}
	/**
	 * 获取计费规则
	 * @param curPage
	 * @param pageSize
	 * @param session
	 * @return  toCustomerPay
	 */
	@RequestMapping("doCustomerPay")
	@ResponseBody
	public String doCustomerPay(@RequestParam(defaultValue = "0") int chargeType,@RequestParam(defaultValue = "0") int siteId,HttpSession session){
		ExecuteResult result=new ExecuteResult();
		result.setCode(200);
		List<SitePriceConfig> custem = userserviceimpl.sitePriceConfigAll(siteId,chargeType);
		if(custem.size() ==0){//判断是否存在融合套餐计费规则
			custem = userserviceimpl.sitePriceConfigAll(siteId,0);//使用普通计费规则，
		}
		result.setData(custem);
		result.setMsg("数据获取成功，请继续操作");
		return result.toJsonString();
	}
	
	/**
	 * 根据场所和用户名查询过期时间
	 * @param siteId
	 * @param username
	 * @param curPage
	 * @param pageSize
	 * @param session
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("getUserInfo")
	@ResponseBody
	public String getUserInfo(@RequestParam(defaultValue = "0") int siteId,@RequestParam(defaultValue = "") String username,HttpSession session){
		ExecuteResult result=new ExecuteResult();
		PortalUser portalUser   = userserviceimpl.getIdByUserName(username);
		if(portalUser ==null){
			result.setCode(201);
			result.setMsg("该用户没有注册,请点击新增用户.");
			return result.toJsonString();
		}
		session.setAttribute("proUser", portalUser);
		SiteCustomerInfo siteCustomer = infoServiceImpl.getExpirationTime(siteId, portalUser.getId());
	
		 List list = new ArrayList();
		 SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		 Date now = new Date();
		
		
		if(siteCustomer==null){
			list.add(portalUser.getUserName());
			list.add(sdf.format(now.getTime()));
			result.setCode(202);
			result.setData(list);
			result.setMsg("欠费");
			return result.toJsonString();
		}else{
			try {
				Date tim = sdf.parse(siteCustomer.getExpirationTime());
				if(tim.getTime() <= now.getTime()&&(siteCustomer.getTotalFlow()==null||Long.parseLong(siteCustomer.getTotalFlow())==0)){
					list.add(portalUser.getUserName());
					list.add(siteCustomer.getExpirationTime().substring(0, 19));
					if(siteCustomer.getTotalFlow()!=null){
					list.add(Long.parseLong(siteCustomer.getTotalFlow())/1024+"M");
					}
					result.setCode(202);
					result.setData(list);
					result.setMsg("欠费");
					return result.toJsonString();
				}
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		//boolean luck = userServiceImpl.isLuckforUser(portalUser.getId(),siteId);
		boolean luck =false;
		Date date = siteCustomer.getLuckTime();
		Date nowDate = new Date();
		long time24 = 24*60*60*1000;
		if(null==date||"".equals(date)){
			luck = false;
		}else{
			long betw = nowDate.getTime()-date.getTime();
			if(time24>betw){
				luck = true;
			}else{
				luck = false;
			}
		}
		
		if(luck){
				result.setCode(203);
				result.setMsg("锁定");
				list.add(portalUser.getUserName());
				list.add(siteCustomer.getExpirationTime().substring(0, 19));
				if(siteCustomer.getTotalFlow()!=null){
					list.add(Long.parseLong(siteCustomer.getTotalFlow())/1024+"M");
				}
				result.setData(list);
				return result.toJsonString();
		}else{
			list.add(portalUser.getUserName());
			list.add(siteCustomer.getExpirationTime().substring(0, 19));
			if(siteCustomer.getTotalFlow()!=null){
				list.add(Long.parseLong(siteCustomer.getTotalFlow())/1024+"M");
			}
			result.setCode(200);
			result.setData(list);
			result.setMsg("正常");
			return result.toJsonString();
		}
	}
	/**
	 * 新的获取收费规则
	 * @param siteId
	 * @param username
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("getPaymentType")
	@ResponseBody
	public String getPaymentType(@RequestParam(defaultValue = "0") int siteId,@RequestParam(defaultValue = "") String username,HttpSession session,Model model){
		ExecuteResult result=new ExecuteResult();
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> map1=new HashMap<String,Object>();
		Set<String> nameSet=new HashSet<String>();
		boolean res=true;
		StringBuffer chargeType =new StringBuffer();
		List<Map<String, Object>> chargeList= infoServiceImpl.getChargeNumber(siteId);//获得未停用的融合套餐
		List<Map<String, Object>> commonList= infoServiceImpl.getCommonNumber(siteId);//获得未停用的非费融合套餐
		
		if(chargeList.size()!=0){
			for(int i=0;i<chargeList.size();i++){
				map.put(chargeList.get(i).get("id").toString(),chargeList.get(i));
			}
			for(String key : map.keySet()){
				res=false;
				Map val = (Map)map.get(key);
				 for (Object k : val.keySet()) {
					 if(res){
						 break;
					 } 
					for (int i = 0; i < val.get("comboNumber").toString().split(";").length; i++) {
						if(username.indexOf(val.get("comboNumber").toString().split(";")[i])==0){
							chargeType.append(key+",");
							map1.put(key, val.get("name"));
							res=true;
							break;
						}
					}
				}
			}
			for(String keys:map1.keySet()){
				for (int i = 0; i < commonList.size(); i++) {
					if(commonList.get(i).get("name").equals(map1.get(keys))){
						commonList.remove(i);
					}
				}
			}
			for (int i = 0; i < commonList.size(); i++) {
				chargeType.append(commonList.get(i).get("id")+",");
			}
		}else{
			chargeType.append(0);
		}	
		List<SitePriceConfig> spcList = new ArrayList<SitePriceConfig>();
			if("0".equals(chargeType.toString())){
				spcList = infoServiceImpl.SitePriceConfigAll(siteId,0);//使用普通计费规则，
		}else{
			 for(int i=0;i<chargeType.toString().split(",").length;i++){
				 nameSet.add(chargeType.toString().split(",")[i]);
			 }
			for(String chargeId:nameSet){
				SitePriceConfig sitePriceConfig=infoServiceImpl.getSitePriceConfig(siteId,chargeId);
				if(sitePriceConfig!=null){
					spcList.add(sitePriceConfig);
				}
			}
		}	
		result.setCode(200);
		result.setData(spcList);
		result.setMsg("获取到数据了");
		return result.toJsonString();
	}
	/**
	 * 快速注册用户
	 * @param curPage
	 * @param pageSize
	 * @param session
	 * @return
	 */
	@RequestMapping("doRegistSD")
	@ResponseBody
	public String doRegistSD(@RequestParam int gender,@RequestParam int siteId,@RequestParam(defaultValue = "") String pwd,@RequestParam(defaultValue = "") String uname,HttpServletRequest req){
		ExecuteResult result=new ExecuteResult();
		
		
		PortalUser u=new PortalUser();
		u.setUserName(uname);
		u.setPassWord(SHA256.getUserPassword(uname, MD5.encode(pwd).toLowerCase()));
		u.setSex(gender);
		boolean registerIsSucess=userserviceimpl.userRegistByAdmin(u);
		boolean insertIntoUse = userserviceimpl.updateIntermediateChart(siteId,u.getId());
		if(registerIsSucess==true&&insertIntoUse==true){
			result.setCode(200);
		}else{
			result.setCode(201);
		}
		return result.toJsonString();
	}
	/**
	 * 
	 * 查询当前登录用户所属的所有上网注册用户的基本信息（同时可查询用户旗下某个场所的所有用户以及根据用户名进行精确查找）
	 * @param siteId 场所id （若传递该参数则查询的是某个具体场所的所有用户，若不传递该参数则显示当前登录用户所有场所下的用户信息）
	 * @param username 用户名 (若传递该参数则进行精确查找)
	 * @param curPage 当前页 
	 * @param pageSize 每页显示
	 * @param session
	 * @return
	 */
	@RequestMapping("getUserInfoList")
	@ResponseBody
	public String getUserInfoList(@RequestParam(defaultValue = "0") int siteId,@RequestParam(defaultValue = "") String username,@RequestParam(defaultValue = "1") int curPage,@RequestParam(defaultValue = "10") int pageSize,HttpSession session){
		ExecuteResult result=new ExecuteResult();
		result.setCode(200);
		int userId=((CloudUser)session.getAttribute("user")).getId();
		
		List<UserInfoBean> list=siteCustomerServiceImpl.getUserInfoList(userId, siteId, username, curPage, pageSize);
		if(list.size()==0){
			result.setCode(201);
			result.setMsg("数据获取失败，请稍后再试");
			return result.toJsonString();
		}
		session.setAttribute("userInfoBean", list);
		result.setData(list);
		return result.toJsonString();
	}
	/**
	 * 获得总页数
	 * @return
	 */
	@RequestMapping("getTotalPage")
	@ResponseBody
	public String getTotalPage(@RequestParam(defaultValue = "0") int siteId,@RequestParam(defaultValue = "") String userName,@RequestParam(defaultValue = "10") int pageSize,HttpSession session){
		ExecuteResult result=new ExecuteResult();
		int userId=((CloudUser)session.getAttribute("user")).getId();
		int totoalNum=siteCustomerServiceImpl.getSiteNum(userId, siteId, userName, pageSize);
		 result.setTotoalNum(totoalNum);
		 result.setCode(200);
		 return result.toJsonString();
	}
	
	/**
	 * 根据电话号码解锁
	 * @param userName
	 */
	@RequestMapping("unLock")
	@ResponseBody
	public String unLock(@RequestParam String userName,@RequestParam int siteId){
		ExecuteResult er= new ExecuteResult();
		boolean isSuccess = userServiceImpl.toJieLuck(userName,siteId);
		if(isSuccess==true){
			er.setCode(200);
			er.setMsg("解锁成功!");
			return er.toJsonString();
		}
		er.setCode(201);
		er.setMsg("解锁失败!");
		return er.toJsonString();
	}
	/**
	 * 把用户停用
	 * @param username
	 * @param siteId
	 * @return
	 */
	@RequestMapping("blockUp")
	@ResponseBody
	public String blockUp(@RequestParam String username,@RequestParam int siteId){
		ExecuteResult result = new ExecuteResult();
		//因为手机号已经验证,所以此处不做判空处理
		PortalUser portalUser   = userserviceimpl.getIdByUserName(username);
		SiteCustomerInfo siteCustomer = infoServiceImpl.getExpirationTime(siteId, portalUser.getId());
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date now = new Date();
		siteCustomer.setExpirationTime(sdf.format(now.getTime()));
		//更新过期时间为当前时间
		userserviceimpl.resetExpirationTime(siteCustomer);
		result.setCode(202);
		result.setData(sdf.format(now.getTime()));
		result.setMsg("停用成功!");
		return result.toJsonString();
	}
	
	 /**
	  * 获得流失用户列表
	  * @param siteId
	  * @param startTime
	  * @param endTime
	  * @param username
	  * @param curPage
	  * @param pageSize
	  * @param session
	  * @return
	  */
	@RequestMapping("getChurnUserList")
	@ResponseBody
	public String getChurnUserList(@RequestParam(defaultValue = "-1") String siteId,
			@RequestParam(defaultValue="") String startTime,@RequestParam(defaultValue="") String endTime,
			@RequestParam(defaultValue = "1") int curPage,@RequestParam(defaultValue = "10") int pageSize,HttpSession session){
		ExecuteResult result=new ExecuteResult();
		int userId=((CloudUser)session.getAttribute("user")).getId();
		 int  churnUser = 0;
		if("-1".equals(siteId)){
			List<ChurnUserBean> list = infoServiceImpl.getChurnUserList("-1", startTime,endTime, userId, curPage, pageSize);
			if(list.size()>0&&list!=null){
				result.setCode(200);
				result.setData(list);
				List counts = infoServiceImpl.exportExcel(siteId, "","", userId);
				if(counts.size()>0&&counts!=null){
				    churnUser = counts.size();
				}else{
					churnUser = 0;
				}
				result.setTotoalNum(churnUser);
				return result.toJsonString();
			}else{
				result.setCode(201);
				result.setTotoalNum(0);
				result.setMsg("暂无数据····");
				return result.toJsonString();
			}
		}else{
			List<ChurnUserBean> list = infoServiceImpl.getChurnUserList(siteId, startTime,endTime, -1, curPage, pageSize);
			if(list.size()>0&&list!=null){
				result.setCode(200);
				result.setData(list);
				List counts = infoServiceImpl.exportExcel(siteId, "","", userId);
				if(counts.size()>0&&counts!=null){
				    churnUser = counts.size();
				}else{
					churnUser = 0;
				}
				result.setTotoalNum(churnUser);
				return result.toJsonString();
			}else{
				result.setCode(201);
				result.setTotoalNum(0);
				result.setMsg("暂无数据····");
				return result.toJsonString();
			}
		}
	}
	/**
	 * 获得流失用户总页数
	 * @param siteId
	 * @param startTime
	 * @param endTime
	 * @param pageSize
	 * @param session
	 * @return
	 */
	@RequestMapping("getChurnTotalPage")
	@ResponseBody
	public String getChurnTotalPage(@RequestParam(defaultValue = "-1") String siteId,
			@RequestParam(defaultValue="") String startTime,@RequestParam(defaultValue="") String endTime,
			@RequestParam(defaultValue = "10") int pageSize,HttpSession session){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		if("-1".equals(siteId)){
			int totalPage = infoServiceImpl.totalPage(siteId, startTime,endTime, userId, pageSize);
			if(totalPage>=0){
				return totalPage+"";
			}else{
				return "1";
			}
		}else{
			int totalPage = infoServiceImpl.totalPage(siteId, startTime,endTime, userId,pageSize);
			if(totalPage>=0){
				return totalPage+"";
			}else{
				return "1";
			}
		}
	}
	/**
	 * 导出excel
	 * @param siteId
	 * @param startTime
	 * @param endTime
	 * @param pageSize
	 * @param session
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping("exportExport")
	public void exportExport(@RequestParam(defaultValue = "-1") String siteId,
			@RequestParam(defaultValue="") String startTime,HttpServletRequest request,HttpServletResponse response,
			@RequestParam(defaultValue="") String endTime,HttpSession session) throws Exception{
		//TODO
		    int userId=((CloudUser)session.getAttribute("user")).getId();
			List list = infoServiceImpl.exportExcel(siteId, startTime, endTime, userId);
			ExportExcelUtils excel = new ExportExcelUtils();
			String[] title = {"用户名","到期时间","最后一次充值金额(元)","总消费金额(元)","消费次数","归属场所"}; 
			if(list!=null&&list.size()>0){
				excel.exportExcel("流失用户详情.xls", title, list, response, request);
			} 
			 
	}
	
	/**
	 * 检验是否有数据
	 * @param siteId
	 * @param startTime
	 * @param endTime
	 * @param pageSize
	 * @param session
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping("checkHaveResult")
	@ResponseBody
	public String checkHaveResult(@RequestParam(defaultValue = "-1") String siteId,
			@RequestParam(defaultValue="") String startTime,HttpServletRequest request,HttpServletResponse response,
			@RequestParam(defaultValue="") String endTime,HttpSession session) throws Exception{
		//TODO
		    int userId=((CloudUser)session.getAttribute("user")).getId();
			List list = infoServiceImpl.exportExcel(siteId, startTime, endTime, userId);
			if(list!=null&&list.size()>0){
				return "true";
			}else{
				return "false";
			}
			 
	}
	
	/**
	 * 对指定用户进行缴费
	 * @param siteId
	 * @param username
	 * @param paytype
	 * @param payno
	 * @param orderNum
	 * @param tradeNum
	 * @param paramJson
	 * @param isFinish
	 * @param failReson
	 * @return
	 * @throws ParseException 
	 */
	
	@RequestMapping("updateCustomerPay")
	@ResponseBody
	public  String updateCustomerPay(@RequestParam(defaultValue="") int siteId,   
			@RequestParam(defaultValue="") String username,
			@RequestParam(defaultValue="") int paytype,
			@RequestParam(defaultValue="") String amount,//购买总金额
			@RequestParam(defaultValue="") int buyNum,//购买数量
			@RequestParam(defaultValue="") String payName,
			@RequestParam String priceNum,@RequestParam String giveNum,@RequestParam int mealType,
			@RequestParam String giveUnit,@RequestParam String priceType,HttpSession session) throws ParseException {
	    Map<String,String> map = new HashMap<String,String>();
	    
	    ExecuteResult result=new ExecuteResult(); 
		map.put("storeId",siteId+"");//场所Id
		map.put("payType",paytype+"");//场所收费配置Id
		map.put("buyNum",buyNum+"");//购买数量
		map.put("priceNum",priceNum);//套餐
		map.put("amount",amount);// 总金额
		map.put("priceName",payName);// 套餐名称
		map.put("addMealNum",giveNum);
		map.put("addMealUnit",giveUnit);
		map.put("mealType",mealType+"");//选择的套餐类型 1----时间，2-----流量
		CloudSite site=cloudSiteServiceImpl.getCloudSiteById(siteId);
		map.put("tenantId", site.getUser_id()+"");// 商户Id
		PortalUser user=(PortalUser)session.getAttribute("proUser");
		if(user==null){
			return result.toJsonString();
		}
		map.put("userId",user.getId()+"");//用户Id
		//根据场所id和priceInfoId获取场所对应的价格配置信息
		SitePriceConfig spcf = sitePriceConfigServiceImpl.getSitePriceInfos(siteId,paytype);
		//如果价格配置信息为空的话
		if(spcf==null){
			return result.toJsonString();
		}
		//根据场所id和用户id查询场所账户表
		boolean ok=userServiceImpl.checkParam(map,spcf);
		if(ok){
			SiteCustomerInfo sci =userServiceImpl.getSiteNameById(siteId, user.getId());
			String riqi=userServiceImpl.getUserCustomer(sci, spcf, map);
			if("1".equals(map.get("mealType"))){//用户购买的是时间套餐
				map.put("expireDate",riqi);
			}else{
				map.put("expireFlow",riqi);
			}
			//订单号
			String out_trade_no="0000"+new Date().getTime();
			//保存支付信息
			userServiceImpl.savePaymentinfo(out_trade_no,map,4);
			
			boolean isOk=userServiceImpl.dealUserMess(map, out_trade_no, "0"+user.getUserName());
			if(isOk){
				result.setCode(200);
			}
		}
		return result.toJsonString();
		
	}
	
	
	
	
	
}
