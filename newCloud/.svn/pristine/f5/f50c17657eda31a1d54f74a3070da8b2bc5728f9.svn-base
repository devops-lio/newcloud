package com.broadeast.controller;

import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.nutz.json.ToJson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.broadeast.entity.CloudUser;
import com.broadeast.entity.UserBankInfo;
import com.broadeast.entity.UserWithdrawInfo;
import com.broadeast.service.impl.PersonalCenterServiceImpl;
import com.broadeast.service.impl.UserServiceImpl;
import com.broadeast.service.impl.WithdrawServiceImpl;
import com.broadeast.util.ExecuteResult;
import com.broadeast.util.MD5;
import com.broadeast.util.SHA256;

@Controller
@RequestMapping("/personalCenter")
public class PersonalCenterController {
	private static Logger log=Logger.getLogger(PersonalCenterController.class);
	VerifyCodeController vcc=new VerifyCodeController();
	@Autowired
	public PersonalCenterServiceImpl personalCenterServiceImpl;
	@Autowired
	public WithdrawServiceImpl withdrawServiceImpl;
	@Autowired
	public UserServiceImpl userServiceImpl;
	@RequestMapping("toPersonalCenter")
	public String toPersonalCenter(HttpSession session,Model model){
	
		return "/personal/personal";
		//"withdraw/NewFile";
	}
	/**
	 * 获得用户的用户名
	 * @param session
	 * @return
	 */
	@RequestMapping("getUserName")
	@ResponseBody
	public String getUserName(HttpSession session ){
		 ExecuteResult excute = new ExecuteResult();
		 String withdrawPhone=null;
		 String userName=((CloudUser)session.getAttribute("user")).getUserName();
		 int id=((CloudUser)session.getAttribute("user")).getId();
		 try{
			 
			 UserWithdrawInfo  u=personalCenterServiceImpl.getUserWithdrawInfo(id);
			 if("".equals(u.getWithdrawPhone())||null==u.getWithdrawPhone()){
				 withdrawPhone=userName;
			 }else{
				 withdrawPhone=u.getWithdrawPhone();
			 }
		
		 }catch(Exception e){
			 log.info("提現金額表里無記錄");
			 withdrawPhone=userName;
		 }	 
		 excute.setData(userName);
		 excute.setMsg(withdrawPhone);
		 return excute.toJsonString();
	}
	/**
	 * 获得用户提现账号的手机号 和银行卡账号
	 * @param session
	 * @return
	 */
	@RequestMapping("getUserWithdrawInfo")
	@ResponseBody
	public String getUserWithdrawInfo(HttpSession session){
		 ExecuteResult excute = new ExecuteResult();
		 int id=((CloudUser)session.getAttribute("user")).getId();
		 //List<String> ls=personalCenterServiceImpl.getUserBankInfo(id);
		 List<UserBankInfo> ls = withdrawServiceImpl.getUserBankInfos(id);
		 if(ls!=null&&ls.size()!=0){
				excute.setCode(200);
				excute.setData(ls);
			}else{
				excute.setCode(201);
			}
		 return excute.toJsonString();
	}
	/**
	 * 获得前台传入的验证码和后台验证码比较
	 * @param authCode 验证码
	 * @param session
	 * @return
	 */
	@RequestMapping("valiateAuthCode")
	@ResponseBody
	public String valiateAuthCode(@RequestParam(defaultValue="") String authCode,HttpSession session ){
		ExecuteResult excute = new ExecuteResult();
		String randCode=(String) session.getAttribute("randCode");
		if("".equals(authCode)){
			excute.setCode(202);
		}else{
			
			if(authCode.equals(randCode)){
				excute.setCode(200);
			}else{
				excute.setCode(201);
			}
		}
		return excute.toJsonString();
	}
	
	/**
	 * 更换用户名时 ,如果验证码正确 则伪修改用户账号,等用户需改密码时一并修改,防止用户修改完账户名时出现意外中断修改密码操作 例如断网等
	 * @param telephone 用户名
	 * @param authCode	验证码
	 * @param session
	 * @return
	 */
	@RequestMapping("updateUserName")
	@ResponseBody
	public String updateUserName(@RequestParam(defaultValue="") String telephone,@RequestParam(defaultValue="") String authCode, HttpSession session,HttpServletRequest request){
		ExecuteResult excute = new ExecuteResult();
		if("".equals(telephone)){
			excute.setCode(203);
			excute.setMsg("请输入手机号");
			return excute.toJsonString();
		}
		if("".equals(authCode)){
			excute.setCode(204);
			excute.setMsg("请输入验证码");
			return excute.toJsonString();
		}
		CloudUser user=personalCenterServiceImpl.selCloudUser(telephone);
		if(user!=null){
			excute.setCode(205);
			excute.setMsg("该号码已注册");
			return excute.toJsonString();
		}
		
		String randCode=(String) session.getAttribute("randCode");
		boolean isOk=vcc.checkCode(authCode,randCode);
		if(!isOk){
			excute.setCode(201);
			excute.setMsg("验证码不正确");
			return excute.toJsonString();
		}
		//5分钟
		Long oldTime=(Long)request.getSession().getAttribute("randCodeTime");
		oldTime=oldTime==null?0:oldTime;
		long newTime=new Date().getTime();
		if((newTime-5*60*1000)<=oldTime){//通过
			request.getSession().removeAttribute("randCode");
			request.getSession().removeAttribute("randCodeTime");
		}else{
			excute.setCode(202);
			excute.setMsg("验证码失效，请重新获取");
			return excute.toJsonString();
		}
		
		excute.setCode(200);
		excute.setMsg("修改成功");
		session.setAttribute("newTel", telephone);
		return excute.toJsonString();
	}
	/**
	 * 同时更改用户名密码,防止出现用户中断修改过程
	 * @param passWord
	 * @param session
	 * @return
	 */
	@RequestMapping("updateUserPassWord")
	@ResponseBody
	public String updateUserPassWord(@RequestParam(defaultValue="") String passWord,HttpSession session){
		ExecuteResult excute = new ExecuteResult();
		if("".equals(passWord)){
			excute.setCode(202);
			excute.setMsg("请输入密码");
			return excute.toJsonString();
		}
		if(passWord.length()<4){
			excute.setCode(203);
			excute.setMsg("密码长度不能少于四位");
			return excute.toJsonString();
		}
		String newUserName=(String) session.getAttribute("newTel");
		int id=((CloudUser)session.getAttribute("user")).getId();
		CloudUser user=(CloudUser) session.getAttribute("user");
		String newPassWord=SHA256.getUserPassword(newUserName, MD5.encode(passWord).toLowerCase());
		int result=personalCenterServiceImpl.updateUserName(id,newUserName,newPassWord);
		if(result==1){
			excute.setCode(200);
			excute.setMsg("修改成功");
			//根据userName和MD5(password)查询用户
			CloudUser newUser=userServiceImpl.getUserByUserNameAndPassword(newUserName, passWord);
			session.setAttribute("user", newUser);
		}else{
			excute.setCode(201);
			excute.setMsg("修改失败,请稍后再试");
		}
		return excute.toJsonString();
	}
	/**
	 * 更换用户提现手机号
	 * @param accountPhone  新的提现手机号
	 * @param authCode		验证码
	 * @param session
	 * @param request
	 * @return
	 */
	@RequestMapping("updateAccountNumber")
	@ResponseBody 
	public String updateAccountNumber(@RequestParam(defaultValue="") String accountPhone,@RequestParam(defaultValue="") String authCode, HttpSession session,HttpServletRequest request ){
		ExecuteResult excute = new ExecuteResult();
		if("".equals(accountPhone)){
			excute.setCode(204);
			excute.setMsg("请输入手机号");
			return excute.toJsonString();
		}
		if("".equals(accountPhone)){
			excute.setCode(205);
			excute.setMsg("请输入验证码");
			return excute.toJsonString();
		}
		int id=((CloudUser)session.getAttribute("user")).getId();
		String randCode=(String) session.getAttribute("randCode");
		boolean isOk=vcc.checkCode(authCode,randCode);
		if(!isOk){
			excute.setCode(201);
			excute.setMsg("验证码不正确");
			return excute.toJsonString();
		}
		//5分钟
		Long oldTime=(Long)request.getSession().getAttribute("randCodeTime");
		oldTime=oldTime==null?0:oldTime;
		long newTime=new Date().getTime();
		if((newTime-5*60*1000)<=oldTime){//通过
			request.getSession().removeAttribute("randCode");
			request.getSession().removeAttribute("randCodeTime");
		}else{
			excute.setCode(202);
			excute.setMsg("验证码失效，请重新获取");
			return excute.toJsonString();
		}
		
		int i=personalCenterServiceImpl.updateAccountPhone(id,accountPhone);
		if(i==1){
			excute.setCode(200);
			excute.setMsg("修改成功");
		}else{
			excute.setCode(203);
			excute.setMsg("修改失败,请稍后重试");
		}
		return excute.toJsonString();
	}
	/**
	 * 添加银行卡
	 * @param bankcarNum 用户银行卡账号
	 * @param accountName 收款人名称
	 * @param bankDeposit 开户银行
	 * @param branchName 支行名称
	 * @param sesson
	 * @return
	 */
	@RequestMapping("addBankInfo")
	@ResponseBody
	public String addBankInfo(@RequestParam String bankcarNum,@RequestParam String accountName,@RequestParam String bankDeposit,@RequestParam String branchName,HttpSession session){
		ExecuteResult excute = new ExecuteResult();
		int id=((CloudUser)session.getAttribute("user")).getId();
		UserBankInfo userBankInfo=new UserBankInfo();
		userBankInfo.setAccountName(accountName);
		userBankInfo.setBankcarNum(bankcarNum);
		userBankInfo.setBankDeposit(bankDeposit);
		userBankInfo.setState(0);
		userBankInfo.setUserId(id);
		int i=personalCenterServiceImpl.addBnakCard(userBankInfo);
		if(i==1){
			excute.setCode(200);
		}else{
			excute.setCode(201);
		}
		return excute.toJsonString();
	}
	/**
	 * 修改用户密码
	 * @param userName 用户名
	 * @param passWord 密码
	 * @param session
	 * @return
	 */
	@RequestMapping("updatePassWord")
	@ResponseBody
	public String updatePassWord(@RequestParam String userName,@RequestParam(defaultValue="") String passWord,HttpSession session ){
		ExecuteResult excute = new ExecuteResult(); 
		String name=((CloudUser)session.getAttribute("user")).getUserName();
		int id=((CloudUser)session.getAttribute("user")).getId();
		if("".equals(passWord)){
			excute.setCode(203);
			 return excute.toJsonString();
		}
		if(!userName.equals(name)){
			 excute.setCode(201);
			 return excute.toJsonString();
		 }
		if(passWord.length()<4){
			 excute.setCode(204);
			 return excute.toJsonString();
		}
		 String newPassWord=SHA256.getUserPassword(userName, MD5.encode(passWord).toLowerCase());
		 int result=personalCenterServiceImpl.updateUserName(id,userName,newPassWord);
		 if(result==1){
			 excute.setCode(200); 
		 }else{
			 excute.setCode(202);
		 }
		 return excute.toJsonString();
	}
	/**
	 * 删除银行卡
	 * @param bankCardNum 银行卡号
	 * @param session
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping("delBankInfo")
	@ResponseBody
	public String delBankInfo(@RequestParam String bankCardNum,HttpServletRequest request,HttpServletResponse response,HttpSession session) throws UnsupportedEncodingException{
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		ExecuteResult excute = new ExecuteResult(); 
		int id=((CloudUser)session.getAttribute("user")).getId();
		UserBankInfo u=personalCenterServiceImpl.selByCardAndName(bankCardNum,id);
		if(u!=null){
			u.setState(1);
			int i=personalCenterServiceImpl.delUserBankInfo(u);
			if(i==1){
				 excute.setCode(200);
			}else{
				 excute.setCode(201);
			}
		}else{
			 excute.setCode(202);
		}
		return excute.toJsonString();
	}
//	@RequestMapping("hasBankInfo")
//	@ResponseBody
//	public String hasBankInfo(@RequestParam String bankcarNums,HttpSession session){
//		int id=((CloudUser)session.getAttribute("user")).getId();
//		ExecuteResult excute = new ExecuteResult(); 
//		UserBankInfo bank=personalCenterServiceImpl.getBankByNum(bankcarNums);
//		if(bank!=null){
//			if(bank.getUserId()!=id){
//				return "false";
//			}else{
//				return "true";
//			}
//		}else{
//			return "true";
//		}
//		return "";
//	} 
	
}
