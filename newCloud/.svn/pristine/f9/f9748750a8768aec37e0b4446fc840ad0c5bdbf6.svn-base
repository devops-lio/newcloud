package com.broadeast.service.impl;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.nutz.dao.Dao;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.broadeast.util.CalendarUtil;

/**
 * 用户下的所有场所数据统计
 * @author gyj
 * create time 2015-11-10
 */
@Service
@SuppressWarnings({ "all"})
public class UserAllSiteDataStatisticsImpl {

    private static Logger log=Logger.getLogger(UserAllSiteDataStatisticsImpl.class);
	
	@Resource(name="jdbcTemplate")
	private JdbcTemplate jdbcTemplate;
	
	@Resource(name="nutDao")
	private Dao nutDao;
	
	@Resource(name="templJdbcTemplate")
	private JdbcTemplate templJdbcTemplate;
	
	@Resource(name="templNutDao")
	private Dao templNutDao;
	/**
	 * 获得用户下的场所下总钱数与当天的总额
	 * 
	 * @param siteId
	 * @return
	 */
	public List<Map>  getAllSiteTotalMoneyAndCurrentPay(Integer userId){
		List<Map> listPut = new ArrayList<>();
		Map map = new HashMap();
		String sql = "SELECT SUM(transaction_amount) todayMoney FROM t_site_income WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id=?)   AND create_time BETWEEN DATE_FORMAT(NOW(),'%Y-%m-%d 00:00:00') AND NOW()";
		String sqls = "SELECT  SUM(transaction_amount) totalMoney from t_site_income WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id=?)";
        try {
        	String list = jdbcTemplate.queryForObject(sql,new Object[]{userId},String.class);
        	if(list!=null&&!"".equals(list)){
        		map.put("todayMoney", list);
        	}else{
        		map.put("todayMoney", "0.0000");
        	}
			
		} catch (Exception e) {
			map.put("todayMoney", "0.0000");
		}
        try {
        	String lists = jdbcTemplate.queryForObject(sqls,new Object[]{userId},String.class);
        	if(lists!=null&&!"".equals(lists)){
        		map.put("totalMoney", lists);
        	}else{
        		map.put("totalMoney", "0.0000");
        	}
		} catch (Exception e) {
			map.put("totalMoney", "0.0000");
		}
        map.put("regiterNotRe", getAllSiteRegisterNum(userId));
		map.put("payNotPay", getAllSitePayPeople(userId));
		map.put("siteNum", String.valueOf(getSiteNum(userId)));
		map.put("tryNotTry", getAllSiteTryPoepleCount(userId));
        listPut.add(map);
        return listPut==null?null:listPut;
	}
	
	
	/**
	 * 当前的用户下所有的归属场所
	 * @param userId
	 * @return
	 */
	public String getUserAllSiteId(Integer userId){
		String sql ="SELECT id FROM t_cloud_site WHERE user_id= ?";
		String arrayStr = null;
		try {
			List<Map<String,Object>> list = jdbcTemplate.queryForList(sql,new Object[]{userId});
			List<Integer> str = new ArrayList();
			if(list.size()>0&&list!=null){
				for(int i=0;i<list.size();i++){
					str.add(Integer.valueOf(list.get(i).get("id")+""));
				}
				arrayStr = str.toString().replace("[","").replace("]","");
			}
		} catch (Exception e) {
			log.error(this.getClass().getCanonicalName()+"--方法:getUserAllSiteId中出现的异常", e);
			return null;
		}
		return arrayStr;
		
	}
 
	/**
	 * 获得前十二天的每天的收入总和
	 * @param siteId
	 */
	public List<Map<String,Object>> getAllSiteOfTwelveDaysBeforeRevenue(Integer userId){
		String sql = "SELECT DATE_FORMAT(create_time,'%Y-%m-%d') date ,SUM(transaction_amount) totalMoney from t_site_income WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id = ?) GROUP BY DATE_FORMAT(create_time,'%Y-%m-%d') ORDER BY DATE_FORMAT(create_time,'%Y-%m-%d') DESC LIMIT 0,12";
		List<Map<String,Object>> listtime = jdbcTemplate.queryForList(sql,new Object[]{userId});
		List<String> list = CalendarUtil.getDateList();
		List<Map<String,Object>> dateMaps = new ArrayList();
		Map dateMap = null;
		for (int i = 0; i < listtime.size(); i++) {
				if(list.contains(listtime.get(i).get("date").toString().trim())){
					for (int j = 0; j <list.size(); j++) {
						if(list.get(j).equals(listtime.get(i).get("date").toString())){
							dateMap = new HashMap();
							dateMap.put("date",listtime.get(i).get("date").toString());
							dateMap.put("totalMoney", listtime.get(i).get("totalMoney"));
							dateMaps.add(dateMap);
							list.remove(j);
							break;
						}
					}
				} 
		}
		for (int i = 0; i < list.size(); i++) {
			dateMap = new HashMap();
			dateMap.put("date",list.get(i).toString());
			dateMap.put("totalMoney",0.0000);
			dateMaps.add(dateMap);
		}
		CalendarUtil.sorts(dateMaps);
		return dateMaps;
	}
	
	/**
	 * 查询某一时间段的每天的收入总和
	 * @param siteId
	 * @throws ParseException 
	 */
	 
	public List<Map<String,Object>> getAllSiteOfInCome(Integer userId,String startTime,String endTime) throws ParseException{
		String sql = "SELECT DATE_FORMAT(create_time,'%Y-%m-%d') date ,SUM(transaction_amount) totalMoney from t_site_income WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id =?) AND create_time BETWEEN ? AND ? GROUP BY DATE_FORMAT(create_time,'%Y-%m-%d') ORDER BY DATE_FORMAT(create_time,'%Y-%m-%d')";
		List<Map<String,Object>> listtime = jdbcTemplate.queryForList(sql,new Object[]{userId,startTime+" 00:00:00",endTime+" 23:59:59"});
		List<String> list = CalendarUtil.getDayBetween(startTime,endTime);
		List<Map<String,Object>> dateMaps = new ArrayList();
		Map dateMap = null;
		for (int i = 0; i < listtime.size(); i++) {
				if(list.contains(listtime.get(i).get("date").toString().trim())){
					for (int j = 0; j <list.size(); j++) {
						if(list.get(j).equals(listtime.get(i).get("date").toString())){
							dateMap = new HashMap();
							dateMap.put("date",listtime.get(i).get("date").toString());
							dateMap.put("totalMoney", listtime.get(i).get("totalMoney"));
							dateMaps.add(dateMap);
							list.remove(j);
							break;
						}
					}
				} 
		}
		for (int i = 0; i < list.size(); i++) {
			dateMap = new HashMap();
			dateMap.put("date",list.get(i).toString());
			dateMap.put("totalMoney",0.0000);
			dateMaps.add(dateMap);
		}
		CalendarUtil.sorts(dateMaps);
		return dateMaps;
		 
	}
	
	/**
	 * 获得每月的总收入
	 * @param siteId
	 * @return
	 */
	 
		public List<Map<String,Object>> getAllSiteTotalMonthlyIncome(Integer userId){
			String sql = "SELECT DATE_FORMAT(create_time,'%Y-%m') date ,SUM(transaction_amount) totalMoney from t_site_income WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id = ?) GROUP BY DATE_FORMAT(create_time,'%Y-%m') ORDER BY DATE_FORMAT(create_time,'%Y-%m') DESC LIMIT 0,12";
			List<Map<String,Object>> listtime = jdbcTemplate.queryForList(sql,new Object[]{userId});
			List<String> list = CalendarUtil.getDateMonthList();
			List<Map<String,Object>> dateMaps = new ArrayList();
			Map dateMap = null;
			for (int i = 0; i < listtime.size(); i++) {
					if(list.contains(listtime.get(i).get("date").toString().trim())){
						for (int j = 0; j <list.size(); j++) {
							if(list.get(j).equals(listtime.get(i).get("date").toString())){
								dateMap = new HashMap();
								dateMap.put("date",(listtime.get(i).get("date").toString()+"月"));
								dateMap.put("totalMoney", listtime.get(i).get("totalMoney"));
								dateMaps.add(dateMap);
								list.remove(j);
								break;
							}
						}
					} 
			}
			for (int i = 0; i < list.size(); i++) {
				dateMap = new HashMap();
				dateMap.put("date",(list.get(i).toString()+"月"));
				dateMap.put("totalMoney",0.0000);
				dateMaps.add(dateMap);
			}
			CalendarUtil.sort(dateMaps);
			return dateMaps;
		}
	   /**
		 * 查询用户下的某年得每月的总收入
		 * @param siteId
		 * @return
	     * @throws ParseException 
		 */
	 
		 public List<Map<String,Object>> getAllSiteMonthlyIncome(Integer userId,String years) throws ParseException{
				String sql = "SELECT DATE_FORMAT(create_time,'%Y-%m') date,SUM(transaction_amount) totalMoney from t_site_income WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id=?) AND DATE_FORMAT(create_time,'%Y')=?  GROUP BY DATE_FORMAT(create_time,'%Y-%m')";
				List<Map<String,Object>> listtime = jdbcTemplate.queryForList(sql,new Object[]{userId,years});
				List<String> list = CalendarUtil.getMonthCollention(years);
				List<Map<String,Object>> dateMaps = new ArrayList();
				Map dateMap = null;
				for (int i = 0; i < listtime.size(); i++) {
						if(list.contains(listtime.get(i).get("date").toString().trim())){
							for (int j = 0; j <list.size(); j++) {
								if(list.get(j).equals(listtime.get(i).get("date").toString())){
									dateMap = new HashMap();
									dateMap.put("date",(listtime.get(i).get("date").toString()+"月"));
									dateMap.put("totalMoney", listtime.get(i).get("totalMoney"));
									dateMaps.add(dateMap);
									list.remove(j);
									break;
								}
							}
						} 
				}
				for (int i = 0; i < list.size(); i++) {
					dateMap = new HashMap();
					dateMap.put("date",(list.get(i).toString()+"月"));
					dateMap.put("totalMoney",0.0000);
					dateMaps.add(dateMap);
				}
				CalendarUtil.sort(dateMaps);
				return dateMaps;
			}
	 /**
		 * 当前用户下的所有场所被多台设备登录用户列表
		 * 
		 * @param siteId
		 * @return list or null
		 */
		public List<Map<String, Object>> getAllSiteManyPoepleUserTelephone(Integer userId) {
			String str = getUserAllSiteId(userId);
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			String tablename = "v1_portal_" + sdf.format(new java.util.Date());
			List<Map<String, Object>> list = null;
			String table = "select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_NAME='"+tablename+"'";
			List<String> isTable = templJdbcTemplate.queryForList(table,String.class);
			if(isTable!=null&&isTable.size()!=0){
			try {
				String sql = "SELECT COUNT(DISTINCT mac) marchNum,Auth_id username ,COUNT(DISTINCT mac) peoNum ,Store_id userId from "+tablename+" WHERE Auth_id<>'00000000000' AND Store_id IN("+str+") group by Auth_id HAVING COUNT(mac)>1 ORDER BY marchNum DESC LIMIT 0,5";
				list = templJdbcTemplate.queryForList(sql);
				 
			} catch (Exception e) {
				log.error("获取被多台设备登录用户列表-----"+e);
		    	}
			}
			return list;
		}
	/**
	 * 当前用户的场所下昨天登录的人数
	 * 
	 * @param siteId
	 * @return
	 */
	 
	public int getAllSiteYesterdayLoginPeopleNum(Integer userId) {
		String str = getUserAllSiteId(userId);
		int count = 0;
		Calendar clendar = Calendar.getInstance();
		clendar.add(Calendar.DATE, -1);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String tablename = "v1_portal_" + sdf.format(clendar.getTime());
		String table = "select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_NAME='"+tablename+"'";
		List<String> isTable = templJdbcTemplate.queryForList(table,String.class);
		if(isTable!=null&&isTable.size()!=0){
		String sql = "SELECT COUNT(m.b) as totalCount FROM (SELECT DISTINCT Auth_id as b ,Store_id as id from "
				+ tablename + " WHERE Auth_id <> '00000000000') m WHERE m.id IN ("+str+")";
		count = templJdbcTemplate.queryForInt(sql);
		return count ;
		}else{
			return 0;
		}
	}
	/**
	 * 获的用户下的缴费记录
	 * 
	 * @param userId
	 * @return
	 */
	public List<Map<String, Object>> getAllSitePayRecord(Integer siteId,Integer portalId) {
		String sql = "SELECT transaction_amount amount ,create_time time from t_site_income WHERE site_id =? AND portal_user_id = ? ORDER BY create_time DESC LIMIT 0,5";
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sql,new Object[] {siteId ,portalId});
		List<Map<String, Object>> lists = new ArrayList<>();
		int size = list.size();
		for (int i = 0; i < size; i++) {
			Map<String, Object> map = new HashMap<>();
				String time = String.valueOf(list.get(i).get("time")).replace(".0", "").trim();
				String amount = String.valueOf(list.get(i).get("amount")).trim();
				map.put("time", time);
				map.put("amount", amount);
			lists.add(map);
		}
		return lists != null ? lists : null;
	}
 
	/**
	 * 当前用户下的所有场所下的用户增长趋势
	 * 
	 * @param siteId
	 */
	
	public List<Map<String, Object>> getAllSiteSubscriberGrowth(Integer userId) {
		List<Map<String, Object>> list = new ArrayList();
		Map map = null;
		String sqlinsert = "SELECT user_growth_data grow from type_datas WHERE user_id = ?";
		List<Map<String,Object>> userGrow = jdbcTemplate.queryForList(sqlinsert, new Object[]{userId});
		if(userGrow!=null&&userGrow.size()>0&&userGrow.get(0).get("grow")!=null&&!("".equals(userGrow.get(0).get("grow")))){
			String[] str = (userGrow.get(0).get("grow")+"").trim().split(",");
			for (int j = 0; j < str.length; j++) {
				map = new HashMap();
				String date = String.valueOf((str[j].split("=")[1]+"").trim());
				Integer num = Integer.valueOf((str[j].split("=")[0]+"").trim());
				map.put("date",date);
				map.put("num", num);
				list.add(map);
			}
			CalendarUtil.sorts(list);//按时间升序排列
			return list;
		}else{
			map = new HashMap();
			map.put("num",0);
			map.put("date", new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			list.add(map);
			return list;
		}
	}
	/**
	 * 重点推广用户列表
	 * 
	 * @param siteId
	 *            在jsp循环的时候把t.id自定义属性循环进去,方便拿到用户的id;
	 */
	public List<Map<String, Object>> getAllSiteKeyEscrowUser(Integer userId) {
		String sql = "SELECT portal_user_name user_name ,COUNT(id) frequency,site_id siteId, portal_user_id id FROM t_site_income WHERE site_id in(SELECT id FROM t_cloud_site WHERE user_id=?)  GROUP BY portal_user_id  ORDER BY COUNT(id) DESC LIMIT 0,5";
		return jdbcTemplate.queryForList(sql,new Object[]{userId});
	}
	
	
	/**
	 * 当前用户下的所有场所的体验终端数
	 * 
	 * @param siteId
	 * @return
	 */
	 
	public String getAllSiteTryPoepleCount(Integer userId) {
		String sql = "SELECT COUNT(DISTINCT mac) from t_portal_user_trial_records WHERE site_id IN (SELECT id FROM t_cloud_site WHERE user_id=?)";
		int tryCount = jdbcTemplate.queryForInt(sql,new Object[]{userId});
		if (tryCount > 0) {
			String tryAndNotTry = String.valueOf(tryCount);
			return tryAndNotTry;
		} else{
			String tryAndNotTry = "0";
			return tryAndNotTry;
		}
		
	}
	/**
	 * 获得当前用户下的所有场所下的已经支付的人数/未支付人数
	 * 
	 * @param siteId
	 * @return
	 */
 
	public String getAllSitePayPeople(Integer userId) {
		int siteNum = getSiteNum(userId);
		String sql = "SELECT COUNT(id) FROM t_site_customer_info WHERE site_id IN (SELECT id FROM t_cloud_site WHERE user_id=?)";
		int payCount = jdbcTemplate.queryForInt(sql,new Object[]{userId});
		if (payCount > 0) {
		      String payAndNotPay = String.valueOf(payCount)+"/"+String.valueOf(siteNum-payCount);
		      return payAndNotPay;
		} else{
			String payAndNotPay = "0/"+String.valueOf(siteNum);
			return payAndNotPay;
		}
		
	}

	/**
	 * 缴费注册率
	 * 昨天新注册的用户/昨天新注册的用户并且缴费
	 * @param siteId
	 * @return
	 */
	 
	public Map getAllSitePayOrNotPay(Integer userId) {
		Map map = new HashMap();
		 //昨天注册并且支付的用户人数
		int payAndRegisterNum = getAllSiteYesterdayPayAndRegisterNum(userId);
		 //昨天的注册人数
		int payCount = getAllSiteTotalYesterdayRegisterNum(userId);
		if (payAndRegisterNum > 0&&payCount>0) {
		    double d = payAndRegisterNum*0.01/payCount;
			  DecimalFormat    df   = new DecimalFormat("######0.0000");   
		      String payNotPay = df.format(d*100);
		      Float f = Float.valueOf(payNotPay);
		      map.put("pay",f);
		}  else{
			 map.put("pay",0.00);
		}
		return map;
	}
	
	/**
	 * @param siteId
	 * 网络感知度
	 * @return
	 */
	 
	public Map getAllSiteTryOrNot(Integer userId) {
		Map map = new HashMap<>();
		int siteNum = getSiteNum(userId);
		int tryCount = Integer.valueOf(getAllSiteTryPoepleCount(userId));
		if (tryCount > 0&&siteNum>0) {
			  double d =	tryCount*0.01/siteNum;
			  DecimalFormat    df   = new DecimalFormat("######0.0000");   
			  String tryAndNotTry = df.format(d*100);
			  Float yesTry = Float.valueOf(tryAndNotTry);
			  map.put("yesTry", yesTry);
		} else{
			map.put("yesTry", 0.00);
		}
		
		return map;
	}
	/**
	 * 获得场所总人数
	 * @param siteId
	 * @return
	 */
 
	public int getSiteNum(Integer userId){
		String sqlTotal = "SELECT SUM(siteNum) from t_cloud_site WHERE user_id=?";
		return jdbcTemplate.queryForInt(sqlTotal,new Object[]{userId});
	}
	
	/**
	 * 获得当前用户下的所有场所的注册人数与未注册人数
	 * @param siteId
	 * @return
	 */
	public String getAllSiteRegisterNum(Integer userId){
        //获得总注册人数
        int registerNum = getAllSiteTotalRegisterNum(userId);
        //总人数
        int siteNum = getSiteNum(userId);
        if(registerNum>0){
        	String registerOrNot = String.valueOf(registerNum)+"/"+String.valueOf((siteNum-registerNum));
        	return registerOrNot;
        }else{
        	String registerOrNot = "0/"+String.valueOf(siteNum);
        	return registerOrNot;
        }
	}
	
	/**
	 * 
	 * @param siteId
	 * 试用注册率  = 注册人数/试用总人数
	 * @return
	 */
	 
	public Map getAllSiteRegisteOrNot(Integer userId) {
		Map map = new HashMap<>();
		int tryNum = Integer.valueOf(getAllSiteTryPoepleCount(userId));
        int regisersNum = getAllSiteTotalRegisterNum(userId);
		if (regisersNum > 0 &&tryNum>0) {
			  double d =	regisersNum*0.01/tryNum;
			  DecimalFormat    df   = new DecimalFormat("######0.0000");   
			  String regisers = df.format(d*100);
			  Float regisersYes = Float.valueOf(regisers);
			  map.put("regisersYes", regisersYes);
		} else{
			map.put("regisersYes", 0.00);
		}
		return map;
	}
	 
	
	/**
	 * 获得用户下的所有场所注册总人数
	 * @param siteId
	 */
     
	public  int getAllSiteTotalRegisterNum(Integer userId){
	    String sql = "SELECT COUNT(d.id) FROM t_cloud_site_portal d "
	    		+ "WHERE d.site_id IN(SELECT id FROM t_cloud_site WHERE user_id=?)";
	    int registerNum = 0;
	    try {
	    	registerNum = jdbcTemplate.queryForInt(sql,new Object[]{userId});
		} catch (Exception e) {
			log.error("获得场所注册总人数异常"+e);
		}
	    return registerNum;
     }
     /**
      * 获得当前用户下的所有场所昨日注册的人数
      * @param siteId
      * @return
      */
    
	public int getAllSiteTotalYesterdayRegisterNum(Integer userId){
    	 int yesterdayRegisterNum = 0;
    	 String sql = "SELECT COUNT(id) FROM t_cloud_site_portal WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id=?)"
 				+ "and create_time BETWEEN (SELECT date_sub(DATE_FORMAT(now(),'%Y-%m-%d 00:00:00'),interval 1 day))  AND (SELECT date_sub(DATE_FORMAT(now(),'%Y-%m-%d 23:59:59'),interval 1 day))";
    	 String sqls = "SELECT COUNT(id) from t_cloud_site_portal WHERE create_time BETWEEN date_sub(DATE_FORMAT(now(),'%Y-%m-%d 00:00:00'),interval 1 day) AND date_sub(DATE_FORMAT(now(),'%Y-%m-%d 23:59:59'),interval 1 day) AND site_id IN(SELECT id FROM t_cloud_site where user_id=?)";
    	 try {
    		 yesterdayRegisterNum = jdbcTemplate.queryForInt(sqls,new Object[]{userId});
		} catch (Exception e) {
			log.error("获得场所昨日注册的总人数异常"+e);
		}
    	 return yesterdayRegisterNum;
     }
     /**
      * 获得用户下的所有场所昨天已经注册并且缴费的人数
      * @param siteId
      * @return
      */
     
	public int getAllSiteYesterdayPayAndRegisterNum(Integer userId){
    	 int yesterdayPayAndRegisterNum = 0;
    	 String sql = "SELECT COUNT(id) FROM t_site_customer_info WHERE  portal_user_id in (SELECT portal_id from t_cloud_site_portal WHERE site_id IN(SELECT id FROM t_cloud_site WHERE user_id=?))"
 				+ "AND create_time BETWEEN (select date_sub(DATE_FORMAT(now(),'%Y-%m-%d 00:00:00'),interval 1 day)) AND (select date_sub(DATE_FORMAT(now(),'%Y-%m-%d 23:59:59'),interval 1 day))";
    	 String sqls = "SELECT COUNT(id) FROM t_site_income WHERE create_time BETWEEN date_sub(DATE_FORMAT(now(),'%Y-%m-%d 00:00:00'),interval 1 day) AND date_sub(DATE_FORMAT(now(),'%Y-%m-%d 23:59:59'),interval 1 day) AND site_id IN(SELECT id FROM t_cloud_site where user_id=?) AND portal_user_id in(SELECT portal_id from t_cloud_site_portal WHERE create_time BETWEEN date_sub(DATE_FORMAT(now(),'%Y-%m-%d 00:00:00'),interval 1 day) AND date_sub(DATE_FORMAT(now(),'%Y-%m-%d 23:59:59'),interval 1 day) AND site_id IN(SELECT id FROM t_cloud_site where user_id=?))";
    	 try {
    		 yesterdayPayAndRegisterNum = jdbcTemplate.queryForInt(sqls,new Object[]{userId,userId});
		} catch (Exception e) {
			log.error("获得昨天已经注册并且缴费的人数异常"+e);
		}				
    	 return yesterdayPayAndRegisterNum;
     }
	
}