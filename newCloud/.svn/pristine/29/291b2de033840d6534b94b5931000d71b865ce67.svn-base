package com.broadeast.controller;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.broadeast.bean.AjaxPageBean;
import com.broadeast.entity.CloudUser;
import com.broadeast.entity.PortalUser;
import com.broadeast.entity.SiteCustomerInfo;
import com.broadeast.entity.SiteIncome;
import com.broadeast.entity.SitePaymentRecord;
import com.broadeast.entity.SitePriceConfig;
import com.broadeast.service.impl.SiteCustomerServiceImpl;
import com.broadeast.service.impl.SitePriceConfigServiceImpl;
import com.broadeast.service.impl.UserServiceImpl;
import com.broadeast.util.DateUtil;
import com.broadeast.util.ExecuteResult;

@Controller
@RequestMapping("/SitePriceBilling")
public class SitePriceBillingController {
	@Autowired
	private SitePriceConfigServiceImpl cr;
	@RequestMapping("toSiteBilling")
	public String toSiteCustomerList(HttpSession session,Model model){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		 List<Map<String, Object>>  list=cr.getUserSiet(userId);
		 model.addAttribute("siteList",list);
		return "/siteBilling/billing";
	}
	
	/**
	 * 返回规则列表 并且用户场所名称
	 * @param curPage
	 * @param pageSize
	 * @param session
	 * @return
	 */
	@RequestMapping("getSitePriceConfigList")
	@ResponseBody
	public String getChargeRule(@RequestParam(defaultValue = "1") int curPage,
			@RequestParam(defaultValue = "10") int pageSize,@RequestParam(defaultValue = "-1") String siteName, HttpSession session) {
		ExecuteResult result=new ExecuteResult(); result.setCode(200);
		int userId=((CloudUser)session.getAttribute("user")).getId();
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("uid",userId+"");
		map.put("curPage",curPage+"");//当前第二页
		map.put("pageSize",pageSize+"");//当前页条数  每页显示条
		if (!siteName.equals("-1")) {
			map.put("siteName",siteName);
		}
		try {
			List uList = cr.getSite(map);
			if(uList.size()==0){
				result.setCode(2);
			}else{
				 result.setCode(1);
				  result.setData(uList);//返回用户场所
			}
			//int totoalNum=cr.getSiteNum(pageSize,userId);
			 
			//  result.setTotoalNum(totoalNum);
			} catch (Exception e) {
				result.setCode(-1);
				result.setMsg("查询异常");
				e.printStackTrace();
				}
		
		return result.toJsonString();
	}
	/**
	 * 获得总页数
	 * @return
	 */
	@RequestMapping("getTotalPage")
	@ResponseBody
	public String getTotalPage(@RequestParam int pageSize,@RequestParam String siteName,HttpSession session){
		ExecuteResult result=new ExecuteResult(); result.setCode(200);
		int userId=((CloudUser)session.getAttribute("user")).getId();
		int totoalNum;
		if(!"-1".equals(siteName)){
			totoalNum=cr.getSiteNameNum(pageSize,userId,siteName);
		}else{
			
			totoalNum=cr.getSiteNum(pageSize,userId);
		}
		if(totoalNum==0){
			result.setCode(201);
		}else{
			
			result.setTotoalNum(totoalNum);
		}
		 return result.toJsonString();
	}
	
	/**
	 * 返回用户拥有的场所
	 * @param session
	 * @return
	 */
	@RequestMapping("getUserSite")
	@ResponseBody
	public String getUserSite(@RequestParam String uId){
		int id=Integer.parseInt(uId);
		 List<Map<String, Object>>  list=cr.getTypePrice(id);
		ExecuteResult result=new ExecuteResult();
		result.setCode(200);
		result.setData(list);
		return result.toJsonString();
	}
	
	/**
	 * 增加新的场所计费规则
	 * @param sitePriceConfig 计费实体
	 * @return
	 */
	@RequestMapping("/addprice")
	@ResponseBody
	public String addPrice( @RequestParam int is_stoped,@RequestParam int price_type,@RequestParam BigDecimal unit_price,@RequestParam(defaultValue="0") BigDecimal chargePrice,
					@RequestParam(defaultValue="0") int charge_type,@RequestParam int site_id,@RequestParam String name,@RequestParam int price_num, @RequestParam(defaultValue="1") String comboNumber )  throws NumberFormatException{
		ExecuteResult result=new ExecuteResult(); 
		SitePriceConfig sitePriceConfig=new SitePriceConfig();
		SitePriceConfig sitePriceConfig1=new SitePriceConfig();
		//增加非融合套餐
		sitePriceConfig.setCharge_type(0);
		sitePriceConfig.setIs_stoped(is_stoped);
		sitePriceConfig.setName(name);
		sitePriceConfig.setPrice_type(price_type);
		sitePriceConfig.setUnit_price(unit_price);
		sitePriceConfig.setSite_id(site_id);
		sitePriceConfig.setPrice_num(price_num);
		//增加融合套餐
		sitePriceConfig1.setCharge_type(charge_type);
		sitePriceConfig1.setIs_stoped(is_stoped);
		sitePriceConfig1.setName(name);
		sitePriceConfig1.setPrice_type(price_type);
		sitePriceConfig1.setUnit_price(chargePrice);
		sitePriceConfig1.setSite_id(site_id);
		sitePriceConfig1.setPrice_num(price_num);
		sitePriceConfig1.setComboNumber(comboNumber);
		boolean selState=cr.selPriceConfig(sitePriceConfig);
		boolean	saveState1=true;
		if(selState){
			boolean  saveState=cr.AddPriceConfig(sitePriceConfig);
				if(!"1".equals(comboNumber)){
					saveState1=cr.AddPriceConfig(sitePriceConfig1);
				}
			if(saveState&&saveState1){
				result.setCode(1);
			}else{
				result.setCode(-1);
			}
		} else{
			result.setCode(-2);
		}
		return result.toJsonString();
	}
	
	/**
	 * 根据名称查询付费
	 */
	@RequestMapping("selByName")
	@ResponseBody
	public String selByName(@RequestParam String name,@RequestParam int siteId){
		ExecuteResult result=new ExecuteResult(); 
		List list =cr.findByName(name,siteId);
		result.setCode(200);
		result.setData(list);
		return result.toJsonString();
	}
	//查询可以套餐类型的数量
	@RequestMapping("findStop")
	@ResponseBody
	public String findStop(@RequestParam int id,HttpSession session){
		ExecuteResult result=new ExecuteResult(); 
		int number=cr.findStopNum(id);
	
		if(number<4){
			result.setCode(200);
		}else{
			result.setCode(201);
		}
		return result.toJsonString();
	}
	//查询可以套餐类型的数量
		@RequestMapping("addFindStop")
		@ResponseBody
		public String addFindStop(@RequestParam int id,@RequestParam String name,HttpSession session){
			ExecuteResult result=new ExecuteResult(); 
			int number=cr.findStopNum(id);
			List<Map<String, Object>> list=cr.selCommonIsStop(name,id);
			if(list.size()==0){
				if(number<4){
					result.setCode(200);
				}else{
					result.setCode(201);
				}
			}else{
				result.setCode(200);
			}
			
			return result.toJsonString();
		}
	/**
	 * 添加号码段
	 * @param priceName
	 * @param comboNumber
	 * @param siteId
	 * @return
	 */
	@RequestMapping("addComboNumber")
	@ResponseBody
	public String addComboNumber(@RequestParam String priceName,@RequestParam String comboNumber,@RequestParam int siteId){
		ExecuteResult result=new ExecuteResult(); 
		boolean addSuccess=cr.addComber(priceName, comboNumber, siteId);
		if(addSuccess){
			result.setCode(200);
		}else{
			result.setCode(201);
		}
		return result.toJsonString();
	}
	/**
	 * 废弃套餐
	 * @param price_num
	 * @param id
	 * @param session
	 * @return
	 */
	@RequestMapping("updateIsStop")
	@ResponseBody
	public String updateIsStop(@RequestParam String name,@RequestParam int id, HttpSession session){
		ExecuteResult result=new ExecuteResult(); 
		cr.upateStop(id, name);
		result.setCode(200);
		return result.toJsonString();
	}
	/**
	 * 启用套餐
	 * @param price_num
	 * @param id
	 * @param session
	 * @return
	 */
	@RequestMapping("updateNoStop")
	@ResponseBody
	public String updateNoStop(@RequestParam String name,@RequestParam int id, HttpSession session){
		ExecuteResult result=new ExecuteResult(); 
		cr.updateNoStop(id, name);
		result.setCode(200);
		return result.toJsonString();
	}
	/**
	 * 更改非融合套餐
	 * @param priceName
	 * @param siteId
	 * @param noChargePrice
	 * @param stoped
	 * @return
	 */
	@RequestMapping("updateNoChargePrice")
	@ResponseBody
	public String updateNoChargePrice(@RequestParam String priceName,@RequestParam int siteId,@RequestParam BigDecimal noChargePrice,@RequestParam int stoped){
		ExecuteResult result=new ExecuteResult(); 
		List<Map<String, Object>> list=cr.selCommonIsStop(priceName,siteId);
		int number=cr.findStopNum(siteId);
		if(list.size()!=0){
			cr.UpdateChargePriceConfig(priceName, noChargePrice,siteId, stoped);
			cr.updateNoStop(siteId, priceName);
			result.setCode(200);
		}else{
			
			if(number<4){
				cr.UpdateChargePriceConfig(priceName, noChargePrice,siteId, stoped);
				cr.updateNoStop(siteId, priceName);
				result.setCode(200);
			}else{
				result.setCode(201);
			}
		}
		
		//result.setCode(200);
		return result.toJsonString();
	}
	
	
	
	
	/**
	 * 更新收费规则 
	 * 更新 成功=1  失败=-1
	 * @param request
	 * @param pc
	 * @return
	 */
	@RequestMapping("updateprice")
	@ResponseBody
	public String UpdatePriceConfig(HttpServletRequest request,@RequestParam String priceName,@RequestParam BigDecimal chargePrice,
			@RequestParam BigDecimal noChargePrice,@RequestParam int stoped,@RequestParam int newCharge_type,@RequestParam int commonType,
			@RequestParam int siteId,@RequestParam (defaultValue="1") String comboNumber,@RequestParam int hasChargePrice,@RequestParam int price_num ) {
		ExecuteResult result=new ExecuteResult(); 
		SitePriceConfig sitePriceConfig=new SitePriceConfig();
		sitePriceConfig.setCharge_type(newCharge_type);
		sitePriceConfig.setIs_stoped(0);
		sitePriceConfig.setName(priceName);
		sitePriceConfig.setPrice_type(commonType);
		sitePriceConfig.setUnit_price(chargePrice);
		sitePriceConfig.setSite_id(siteId);
		sitePriceConfig.setPrice_num(price_num);
		sitePriceConfig.setComboNumber(comboNumber);
		
		int number=cr.findStopNum(siteId);
		if(number<4){
			
		}
		
		
		if("1".equals(comboNumber)){
			cr.UpdateChargePriceConfig(priceName, noChargePrice,siteId, stoped);
		}else{
			if(hasChargePrice==1){
				cr.AddPriceConfig(sitePriceConfig);
			}else{ 
				cr.UpdatePriceConfig(priceName,chargePrice,newCharge_type,siteId,comboNumber);
			}
			cr.UpdateChargePriceConfig(priceName, noChargePrice,siteId, stoped);
			//cr.UpdatePriceConfig(priceName,chargePrice,newCharge_type,siteId,comboNumber);
		}
		result.setCode(200);
		return result.toJsonString();
	}
	/**
	 * 查看融合套餐是否作废
	 * @param price_num
	 * @param session
	 * @return
	 */
	@RequestMapping("selChargeIsStop")
	@ResponseBody
	public String selChargeIsStop(@RequestParam String name,@RequestParam int siteId,HttpSession session){
		ExecuteResult result=new ExecuteResult(); 
		List<Map<String, Object>> list=cr.selChargeIsStop(name,siteId);
		if(list.size()==0){
			result.setCode(202);
		}else{
			if((int)list.get(0).get("is_stoped")!=0){
				result.setCode(201);
			}else{
				result.setCode(200);
			}
		}
		return result.toJsonString();
	}
	/**
	 * 废弃融合套餐
	 * @param price_num
	 * @param session
	 * @return
	 */
	@RequestMapping("stopCharge")
	@ResponseBody
	public String stopCharge(@RequestParam String name,@RequestParam int siteId){
		ExecuteResult result=new ExecuteResult(); 
		cr.updateStopCharge(name,siteId);
		result.setCode(200); 
		
		return result.toJsonString();
	}
	/**
	 * 开启融合套餐
	 * @param price_num
	 * @param session
	 * @return
	 */
	@RequestMapping("openmeal")
	@ResponseBody
	public String openCharge(@RequestParam String name,@RequestParam int siteId){
		ExecuteResult result=new ExecuteResult();
		cr.updateMeal(name,siteId);
			result.setCode(200);
		return result.toJsonString();
	}

}
