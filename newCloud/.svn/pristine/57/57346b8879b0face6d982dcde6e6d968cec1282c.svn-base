package com.broadeast.controller;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.AuthorizationException;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.broadeast.entity.CloudUser;
import com.broadeast.service.impl.SitePriceConfigServiceImpl;
import com.broadeast.service.impl.UserAllSiteDataStatisticsImpl;
import com.broadeast.util.DateUtil;
import com.broadeast.util.ExecuteResult;

@Controller
@RequestMapping(value="allSiteOfReportStatistics")
public class AllSiteOfReportStatisticsController {

	@Autowired
	public UserAllSiteDataStatisticsImpl userAllSiteDataStatisticsImpl;

	@Autowired
	public SitePriceConfigServiceImpl sitePriceConfigServiceImpl;
	
//	@RequiresRoles("admin")
	@RequestMapping("index")
	public String toManageIndex(HttpSession session,Model model){
			 int userId=((CloudUser)session.getAttribute("user")).getId();
			 List<Map<String, Object>>  list=sitePriceConfigServiceImpl.getUserSiet(userId);
			 model.addAttribute("siteList",list);
	         return "/newstylejsp/operation/operation";
	}
	
	/**
	 *  用户下获得所有场所下总钱数与当天的总额
	 * @param siteId
	 * @return
	 */
	@RequestMapping(value="/getAllSiteTotalMoneyAndPeopleCount")
	@ResponseBody
	public String getAllSiteTotalMoneyAndPeopleCount(HttpSession session){
		ExecuteResult result = new ExecuteResult();
		int userId=((CloudUser)session.getAttribute("user")).getId();
		List<Map> list = userAllSiteDataStatisticsImpl.getAllSiteTotalMoneyAndCurrentPay(userId);
		if(list.size()!=0&&list!=null){
			result.setCode(200);
			result.setData(list);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	/**
	 * 用户下获得所有场所当前的场所 12天的支付总额
	 * @param siteId
	 * @return
	 */
	@RequestMapping(value="/getAllSiteOfTwelveDaysBeforeRevenue")
	@ResponseBody
	public String getAllSiteOfTwelveDaysBeforeRevenue(HttpSession session){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> map = userAllSiteDataStatisticsImpl.getAllSiteOfTwelveDaysBeforeRevenue(userId);
		if(map!=null&&map.size()!=0){
			result.setCode(200);
			result.setData(map);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	/**
	 * 查询当前用户下的所有场所某时间段的每天的收入情况
	 * @param siteId
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value="/getAllSiteOfInCome")
	@ResponseBody
	public String getAllSiteOfInCome(HttpSession session,@RequestParam(defaultValue="00:00:00") String startTime,@RequestParam(defaultValue="00:00:00") String endTime) throws ParseException{
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> map = userAllSiteDataStatisticsImpl.getAllSiteOfInCome(userId,startTime,endTime);
		if(map!=null&&map.size()!=0){
			result.setCode(200);
			result.setData(map);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	
	/**
	 * 用户下获得所有场所 每月的总收入
	 * @param siteId
	 * @return
	 */
	@RequestMapping(value="/getAllSiteTotalMonthlyIncome")
	@ResponseBody
	public String getAllSiteTotalMonthlyIncome(HttpSession session){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> map = userAllSiteDataStatisticsImpl.getAllSiteTotalMonthlyIncome(userId);
		if(map!=null&&map.size()!=0){
			result.setCode(200);
			result.setData(map);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	
	/**
	 * 查询用户下获得所有场所 某年每月的总收入
	 * @param siteId
	 * @return
	 * @throws ParseException 
	 */
	@RequestMapping(value="/getAllSiteMonthlyIncome")
	@ResponseBody
	public String getAllSiteMonthlyIncome(HttpSession session,@RequestParam String years) throws ParseException{
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> map = userAllSiteDataStatisticsImpl.getAllSiteMonthlyIncome(userId,years);
		if(map!=null&&map.size()!=0){
			result.setCode(200);
			result.setData(map);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	/**
	 * 用户下获得所有场所当月增长人数趋势
	 * @param siteId
	 * @return
	 */
	 
	@RequestMapping(value="/getAllSiteSubscriberGrowth")
	@ResponseBody
	public String getAllSiteSubscriberGrowth(HttpSession session){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> list = userAllSiteDataStatisticsImpl.getAllSiteSubscriberGrowth(userId);
		if(list!=null&&list.size()!=0){
			result.setCode(200);
			result.setData(list);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	
	/**
	 *  被多台设备登录用户列表
	 * @param siteId
	 * @return
	 */
	@SuppressWarnings({ "unused", "unchecked", "rawtypes" })
	@RequestMapping(value="/getAllSiteManyPoepleUserTelephone")
	@ResponseBody
	public String getAllSiteManyPoepleUserTelephone(HttpSession session){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> map = userAllSiteDataStatisticsImpl.getAllSiteManyPoepleUserTelephone(userId);
		Integer loginNum = userAllSiteDataStatisticsImpl.getAllSiteYesterdayLoginPeopleNum(userId);
		Map<String,Object> nameCount = new HashMap();
		nameCount.put("count",loginNum);
		if(map!=null&&map.size()!=0){
			map.add(nameCount);
			result.setCode(200);
			result.setData(map);
		}else{
			List maps = new ArrayList();
			maps.add(loginNum);
			result.setCode(201);
			result.setData(maps);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	/**
	 *  重点推广用户列表
	 * @param siteId
	 * @return
	 */
	@RequestMapping(value="/getAllSiteKeyEscrowUser")
	@ResponseBody
	public String getAllSiteKeyEscrowUser(HttpSession session){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> map = userAllSiteDataStatisticsImpl.getAllSiteKeyEscrowUser(userId);
		if(map!=null&&map.size()!=0){
			result.setCode(200);
			result.setData(map);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	/**
	 * 获的用户下的缴费记录
	 * @param siteId
	 * @return
	 */
	@RequestMapping(value="/getAllSitePayRecord")
	@ResponseBody
	public String getAllSitePayRecord(HttpSession session,@RequestParam Integer siteId ,@RequestParam Integer portalId){
		ExecuteResult result = new ExecuteResult();
		List<Map<String, Object>> map = userAllSiteDataStatisticsImpl.getAllSitePayRecord(siteId, portalId);
		if(map!=null&&map.size()!=0){
			result.setCode(200);
			result.setData(map);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	
	/**
	 * 获的用户下的缴费记录
	 * @param siteId
	 * @return
	 */
	@SuppressWarnings({ "unused", "unchecked", "rawtypes" })
	@RequestMapping(value="/getAllSitePayTryPay")
	@ResponseBody
	public String getAllSitePayTryPay(HttpSession session){
		int userId=((CloudUser)session.getAttribute("user")).getId();
		ExecuteResult result = new ExecuteResult();
		List list = new ArrayList();
		Map allPayOrNotPay = userAllSiteDataStatisticsImpl.getAllSitePayOrNotPay(userId);
		Map allTryNotTry = userAllSiteDataStatisticsImpl.getAllSiteTryOrNot(userId);
		Map reNotRe = userAllSiteDataStatisticsImpl.getAllSiteRegisteOrNot(userId);
		list.add(allPayOrNotPay);
		list.add(allTryNotTry);
		list.add(reNotRe);
		if(list!=null){
			result.setCode(200);
			result.setData(list);
		}else{
			result.setCode(201);
			result.setMsg("暂无数据···");
		}
		return result.toJsonString();
	}
	
	/**
	 * 获取 独立用户总数 、 注册用户数 、 付费用户总数 、 昨日登录用户数
	 *    用户渗透率 、 新增注册转换率 、 新增付费转换率
	 * @Description: 
	 * @param session
	 * @return
	 * @Date		2016年7月5日 下午2:46:35
	 * @Author		cuimiao
	 */
	@RequestMapping(value="/getAllBusinessData")
	@ResponseBody
	public String getAllBusinessData(HttpSession session,@RequestParam(defaultValue = "-1") Integer siteId){
		
		int userId=((CloudUser)session.getAttribute("user")).getId();
		
		//1.根据siteId获取businessDataList
		List<Map<String, Object>> businessDataList = userAllSiteDataStatisticsImpl.getBusinessDataBySiteId(siteId,userId);
		
		int onlinenum = userAllSiteDataStatisticsImpl.getNowonlineNum(siteId, userId);
		
		//处理businessDataList 获取businessData（即，若有多条数据，整合为一条）
		Map<String, Object> businessData = new HashMap<String, Object>();
		for (int i = 0; i < businessDataList.size(); i++) {
			//处理 独立用户总数
			if(businessDataList.get(i).get("uv_num") != null){
				if(businessData.get("uv_num") != null){
					//不为空累加
					businessData.put("uv_num", Integer.parseInt(businessDataList.get(i).get("uv_num")+"") + Integer.parseInt(businessData.get("uv_num")+"") );
				}else{
					//为空赋值
					businessData.put("uv_num", businessDataList.get(i).get("uv_num"));
				}
				
			}
			
			//处理 注册用户数
			if(businessDataList.get(i).get("register_num") != null){
				if(businessData.get("register_num") != null){
					//不为空累加
					businessData.put("register_num", Integer.parseInt(businessDataList.get(i).get("register_num")+"") + Integer.parseInt(businessData.get("register_num")+"") );
				}else{
					//为空赋值
					businessData.put("register_num", businessDataList.get(i).get("register_num"));
				}
			}
			
			//处理 付费用户总数
			if(businessDataList.get(i).get("pay_num") != null){
				if(businessData.get("pay_num") != null){
					//不为空累加
					businessData.put("pay_num", Integer.parseInt(businessDataList.get(i).get("pay_num")+"") + Integer.parseInt(businessData.get("pay_num")+"") );
				}else{
					//为空赋值
					businessData.put("pay_num", businessDataList.get(i).get("pay_num"));
				}
			}
			
			//处理 昨日登录用户数
			if(businessDataList.get(i).get("loginNum") != null){
				if(businessData.get("loginNum") != null){
					//不为空累加
					businessData.put("loginNum", Integer.parseInt(businessDataList.get(i).get("loginNum")+"") + Integer.parseInt(businessData.get("loginNum")+"") );
				}else{
					//为空赋值
					businessData.put("loginNum", businessDataList.get(i).get("loginNum"));
				}
			}
			
			//处理 昨日登录用户数
			if(businessDataList.get(i).get("login_num") != null){
				if(businessData.get("login_num") != null){
					//不为空累加
					businessData.put("login_num", Integer.parseInt(businessDataList.get(i).get("login_num")+"") + Integer.parseInt(businessData.get("login_num")+"") );
				}else{
					//为空赋值
					businessData.put("login_num", businessDataList.get(i).get("login_num"));
				}
			}
			
			//处理 用户渗透率(分子)
			if(businessDataList.get(i).get("permeate_ratenum") != null){
				if(businessData.get("permeate_ratenum") != null){
					//不为空累加
					businessData.put("permeate_ratenum", Integer.parseInt(businessDataList.get(i).get("permeate_ratenum")+"") + Integer.parseInt(businessData.get("permeate_ratenum")+"") );
				}else{
					//为空赋值
					businessData.put("permeate_ratenum", businessDataList.get(i).get("permeate_ratenum"));
				}
			}
			
			//处理 用户渗透率(分母)
			if(businessDataList.get(i).get("permeate_rateden") != null){
				if(businessData.get("permeate_rateden") != null){
					//不为空累加
					businessData.put("permeate_rateden", Integer.parseInt(businessDataList.get(i).get("permeate_rateden")+"") + Integer.parseInt(businessData.get("permeate_rateden")+"") );
				}else{
					//为空赋值
					businessData.put("permeate_rateden", businessDataList.get(i).get("permeate_rateden"));
				}
			}
			
			//处理 新增注册转换率(分子)
			if(businessDataList.get(i).get("try_register_ratenum") != null){
				if(businessData.get("try_register_ratenum") != null){
					//不为空累加
					businessData.put("try_register_ratenum", Integer.parseInt(businessDataList.get(i).get("try_register_ratenum")+"") + Integer.parseInt(businessData.get("try_register_ratenum")+"") );
				}else{
					//为空赋值
					businessData.put("try_register_ratenum", businessDataList.get(i).get("try_register_ratenum"));
				}
			}
			
			//处理 新增注册转换率(分母)
			if(businessDataList.get(i).get("try_register_rateden") != null){
				if(businessData.get("try_register_rateden") != null){
					//不为空累加
					businessData.put("try_register_rateden", Integer.parseInt(businessDataList.get(i).get("try_register_rateden")+"") + Integer.parseInt(businessData.get("try_register_rateden")+"") );
				}else{
					//为空赋值
					businessData.put("try_register_rateden", businessDataList.get(i).get("try_register_rateden"));
				}
			}
			
			//处理 新增付费转换率(分子)
			if(businessDataList.get(i).get("register_pay_ratenum") != null){
				if(businessData.get("register_pay_ratenum") != null){
					//不为空累加
					businessData.put("register_pay_ratenum", Integer.parseInt(businessDataList.get(i).get("register_pay_ratenum")+"") + Integer.parseInt(businessData.get("register_pay_ratenum")+"") );
				}else{
					//为空赋值
					businessData.put("register_pay_ratenum", businessDataList.get(i).get("register_pay_ratenum"));
				}
			}
			
			//处理 新增付费转换率(分子)
			if(businessDataList.get(i).get("register_pay_rateden") != null){
				if(businessData.get("register_pay_rateden") != null){
					//不为空累加
					businessData.put("register_pay_rateden", Integer.parseInt(businessDataList.get(i).get("register_pay_rateden")+"") + Integer.parseInt(businessData.get("register_pay_rateden")+"") );
				}else{
					//为空赋值
					businessData.put("register_pay_rateden", businessDataList.get(i).get("register_pay_rateden"));
				}
			}
		}
		
		//2.处理businessData
		
		//Double保留两位小数format
		DecimalFormat df = new DecimalFormat("#.00");
		//用户渗透率(分子)
		Double permeateRatenum = 0.0;
		if( businessData.get("permeate_ratenum") != null){
			permeateRatenum =Double.parseDouble(businessData.get("permeate_ratenum")+"");
		}
		//用户渗透率(分母)
		Double permeateRateden = 0.0;
		if( businessData.get("permeate_rateden") != null){
			permeateRateden = Double.parseDouble(businessData.get("permeate_rateden")+"");
		}
		//用户渗透率
		Double permeateRate = 0.0;
		if(permeateRateden != 0.0){
			permeateRate = permeateRatenum / permeateRateden ;
		}
		//用户渗透率格式化，保留两位小数
		Double permeateRateFormat = Double.parseDouble(df.format(permeateRate));
		
		// 新增注册转换率(分子)
		Double tryRegisterRatenum = 0.0;
		if( businessData.get("try_register_ratenum") != null){
			tryRegisterRatenum =Double.parseDouble(businessData.get("try_register_ratenum")+"");
		}
		// 新增注册转换率(分母)
		Double tryRegisterRateden = 0.0;
		if( businessData.get("try_register_rateden") != null){
			tryRegisterRateden = Double.parseDouble(businessData.get("try_register_rateden")+"");
		}
		// 新增注册转换率
		Double tryRegisterRate = 0.0;
		if(tryRegisterRateden != 0.0){
			tryRegisterRate = tryRegisterRatenum / tryRegisterRateden ;
		}
		//新增注册转换率格式化保留两位小数
		Double tryRegisterRateFormat = Double.parseDouble(df.format(tryRegisterRate));
		
		//新增付费转换率(分子)
		Double registerPayRatenum = 0.0;
		if( businessData.get("register_pay_ratenum") != null){
			registerPayRatenum =Double.parseDouble(businessData.get("register_pay_ratenum")+"");
		}
		//新增付费转换率(分母)
		Double registerPayRateden = 0.0;
		if( businessData.get("register_pay_rateden") != null){
			registerPayRateden = Double.parseDouble(businessData.get("register_pay_rateden")+"");
		}
		//新增付费转换率
		Double registerPayRate = 0.0;
		if(registerPayRateden != 0.0){
			registerPayRate = registerPayRatenum / registerPayRateden ;
		}
		//新增付费转换率 格式化保留两位小数
		Double registerPayRateFormat = Double.parseDouble(df.format(registerPayRate));
		
		//3.将处理后的数据传到前端展示
	
		ExecuteResult result = new ExecuteResult();
		Map<String,Object> data = new HashMap<String, Object>();
		data.put("uvNum", businessData.get("uv_num"));
		data.put("registerNum", businessData.get("register_num"));
		data.put("payNum", businessData.get("pay_num"));
		data.put("loginNum", businessData.get("login_num"));
		data.put("permeateRate", permeateRateFormat);
		data.put("tryRegisterRate", tryRegisterRateFormat);
		data.put("registerPayRate", registerPayRateFormat);
		data.put("onlinenum", onlinenum);
		result.setCode(200);
		result.setData(data);
		return result.toJsonString();
	}
	
	/**
	 * 获取 新增付费转换率 折线图
	 * @Description: 
	 * @param session
	 * @return
	 * @Date		2016年7月5日 下午5:02:53
	 * @Author		cuimiao
	 */
	@RequestMapping(value="/getDataChart")
	@ResponseBody
	public String getRegisterPayDataChart(HttpSession session,@RequestParam(defaultValue = "-1") Integer siteId,
										@RequestParam String startDate,@RequestParam String endDate){
		
		//判断endDate，若等于或大于今天，则置为昨天
		if(DateUtil.compareDate(DateUtil.string2DateShort(DateUtil.getStringDateShort()), DateUtil.string2DateShort(endDate)) < 0){
			//置为昨天
			endDate = DateUtil.date2StringShort(DateUtil.dateSub(DateUtil.getStringDateShort(), 1));
		}
		
		int userId=((CloudUser)session.getAttribute("user")).getId();
		
		//存放 用户渗透率、新增注册转换率、新增付费转换率 和 显示日期 的map，放入json的data中传到前端显示
		Map<String,List> dataMap = new HashMap<String, List>(); 
		
		//Double格式化，保留两位小数
		DecimalFormat df = new DecimalFormat("#.00");
		
		//查询 用户渗透率 list
		List<Map<String,Object>> perInfoList = userAllSiteDataStatisticsImpl.getPermeateList(siteId,userId,startDate,endDate);
		
		//查询 新增注册转换率 list
		List<Map<String,Object>> tryInfoList = userAllSiteDataStatisticsImpl.getTryRegisterList(siteId,userId,startDate,endDate);
		
		//查询 新增付费转换率 list
		List<Map<String,Object>> regInfoList = userAllSiteDataStatisticsImpl.getRegisterPayList(siteId,userId,startDate,endDate);
		
		//用户渗透率 结果list
		List<Double> permeateList = new ArrayList<Double>();
		
		//新增注册转换率 结果list
		List<Double> tryRegisterList = new ArrayList<Double>();
		
		//新增付费转换率 结果list
		List<Double> registerPayList = new ArrayList<Double>();
		
		//TODO 还有获取时间list方法
		List dateList = new ArrayList();
		
		//用户渗透率 list 遍历  
		for (int i = 0; i < perInfoList.size(); i++) {
			dateList.add(DateUtil.getStringDateShort((Date)perInfoList.get(i).get("create_time")));
			//用户渗透率(分子)
			Double permeateRatenum = 0.0;
			if( perInfoList.get(i).get("permeate_ratenum") != null){
				permeateRatenum =Double.parseDouble(perInfoList.get(i).get("permeate_ratenum").toString());
			}
			//用户渗透率(分母)
			Double permeateRateden = 0.0;
			if( perInfoList.get(i).get("permeate_rateden") != null){
				permeateRateden = Double.parseDouble(perInfoList.get(i).get("permeate_rateden").toString());
			}
			//用户渗透率
			Double permeateRate = 0.0;
			if(permeateRateden != 0.0){
				permeateRate = permeateRatenum / permeateRateden ;
			}
			//用户渗透率 格式化两位小数
			Double permeateRateFormat = Double.parseDouble(df.format(permeateRate*100));
			permeateList.add(permeateRateFormat);
		}
		dataMap.put("permeateList", permeateList);
		
		//新增注册转换率 list 遍历
		for (int i = 0; i < tryInfoList.size(); i++) {
			//新增注册转换率(分子)
			Double tryRegisterRatenum = 0.0;
			if( tryInfoList.get(i).get("try_register_ratenum") != null){
				tryRegisterRatenum =Double.parseDouble(tryInfoList.get(i).get("try_register_ratenum").toString());
			}
			//新增注册转换率(分母)
			Double tryRegisterRateden = 0.0;
			if( tryInfoList.get(i).get("try_register_rateden") != null){
				tryRegisterRateden = Double.parseDouble(tryInfoList.get(i).get("try_register_rateden").toString());
			}
			//新增注册转换率
			Double tryRegisterRate = 0.0;
			if(tryRegisterRateden != 0.0){
				tryRegisterRate = tryRegisterRatenum / tryRegisterRateden ;
			}
			//新增注册转换率字符串显示 例0.8964 --> 89.64(字符串)
			Double tryRegisterRateFormate = Double.parseDouble(df.format(tryRegisterRate*100));
			tryRegisterList.add(tryRegisterRateFormate);
		}
		dataMap.put("tryRegisterList", tryRegisterList);
		
		//新增付费转换率 list 遍历
		for (int i = 0; i < regInfoList.size(); i++) {
			//新增付费转换率(分子)
			Double registerPayRatenum = 0.0;
			if( regInfoList.get(i).get("register_pay_ratenum") != null){
				registerPayRatenum =Double.parseDouble(regInfoList.get(i).get("register_pay_ratenum").toString());
			}
			//新增付费转换率(分母)
			Double registerPayRateden = 0.0;
			if( regInfoList.get(i).get("register_pay_rateden") != null){
				registerPayRateden = Double.parseDouble(regInfoList.get(i).get("register_pay_rateden").toString());
			}
			//新增付费转换率
			Double registerPayRate = 0.0;
			if(registerPayRateden != 0.0){
				registerPayRate = registerPayRatenum / registerPayRateden ;
			}
			//新增付费转换率格式化保留两位小数
			Double registerPayRateFormate = Double.parseDouble(df.format(registerPayRate*100));
			registerPayList.add(registerPayRateFormate);
		}
		dataMap.put("registerPayList", registerPayList);
		
		//将时间list放入map
		dataMap.put("dateList", dateList);
		
		//封装结果，返回前端
		ExecuteResult result = new ExecuteResult();
		result.setCode(200);
		result.setData(dataMap);
		return result.toJsonString();
	}
 
	
}
