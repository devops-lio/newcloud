package com.broadeast.service.impl;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.nutz.dao.Cnd;
import org.nutz.dao.Dao;
import org.nutz.dao.FieldFilter;
import org.nutz.dao.util.Daos;
import org.nutz.lang.Lang;
import org.nutz.trans.Atom;
import org.nutz.trans.Trans;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import sun.misc.BASE64Decoder;

import com.broadeast.bean.AjaxPageBean;
import com.broadeast.bean.RouterInfoBean;
import com.broadeast.bean.SiteInfoBean;
import com.broadeast.entity.CloudSite;
import com.broadeast.entity.CloudSiteRouters;
import com.broadeast.entity.SitePriceConfig;
import com.broadeast.entity.StoreRouter;
import com.broadeast.util.OssManage;
import com.broadeast.util.PagingFactory;
@Repository
public class CloudSiteServiceImpl {

	private static Logger log=Logger.getLogger(CloudSiteServiceImpl.class);
	
	@Resource(name="jdbcTemplate")
	private JdbcTemplate jdbcTemplate;
	
	@Resource(name="nutDao")
	private Dao nutDao;
	
	@Resource(name="templJdbcTemplate")
	private JdbcTemplate templJdbcTemplate;
	
	@Resource(name="templNutDao")
	private Dao templNutDao;
	
		
		/**
		 * 添加场所
		 * @param user
		 * @return
		 */
		public boolean addCloudSite(final String siteName,final String address,final int userId,final String siteNum){
			try {
		        Trans.exec(new Atom(){
		            public void run() {
		        		//开启事务 保存user表
		            	CloudSite cloudsite = new CloudSite();
		            	cloudsite.setUser_id(userId);
		            	cloudsite.setSite_name(siteName);
		            	cloudsite.setAddress(address);
		            	cloudsite.setSiteNum(Integer.valueOf(siteNum));
		            	cloudsite.setAllow_client_num(1);
		            	nutDao.insert(cloudsite);
		            	
		            	//保存SitePriceConfig表
		            	//按小时收费
		            	SitePriceConfig spchour=new SitePriceConfig();
		            	spchour.setSite_id(cloudsite.getId());
		            	spchour.setPrice_type(0);
		            	spchour.setUnit_price(new BigDecimal(1));
		            	spchour.setCharge_type(0);
		            	spchour.setName("时");
		            	
		            	//按天收费
		            	SitePriceConfig spcday=new SitePriceConfig();
		            	spcday.setSite_id(cloudsite.getId());
		            	spcday.setPrice_type(1);
		            	spcday.setUnit_price(new BigDecimal(10));
		            	spcday.setCharge_type(0);
		            	spcday.setName("天");
		            	//按月收费
		            	SitePriceConfig spcmonth=new SitePriceConfig();
		            	spcmonth.setSite_id(cloudsite.getId());
		            	spcmonth.setPrice_type(2);
		            	spcmonth.setUnit_price(new BigDecimal(100));
		            	spcmonth.setCharge_type(0);
		            	spcmonth.setName("月");
		            	List<SitePriceConfig> spclist=new ArrayList<SitePriceConfig>();
		            	spclist.add(spchour);
		            	spclist.add(spcday);
		            	spclist.add(spcmonth);
		            	
		            	Daos.ext(nutDao, FieldFilter.create(SitePriceConfig.class, "^site_id|price_type|unit_price|name$")).insert(spclist);
		            }
		        });
	        }catch (Exception e) {
	        	log.error("userRegist 事务报错--", e);
	        	return false;
	        }
			return true;
		}
		
		
		/**
		 * @Description: 获得路由类型列表
		 * @return
		 * @Date		2016年6月6日 下午4:53:11
		 * @Author		cuimiao
		 */
		public List<Map<String,Object>> getRouterTypeList(){
			StringBuffer sql = new StringBuffer();
			sql.append(" SELECT distinct ");
			sql.append(" router_type,router_name ");
			sql.append(" FROM t2_router_type");
			List<Map<String, Object>> list =jdbcTemplate.queryForList(sql.toString());
			return list;
		}
		
		
		/**
		 * 查询当前登录用户下是否还有未绑定设备的场所 
		 * @param userId
		 * @return
		 */
		public int querySiteConfigBySiteIdAndUserID(int userId){
			String sql="select count(site.id) from t_cloud_site site where site.user_id="+userId+" and site.id not in(select routers.site_id from t_cloud_site_routers routers)";
			int count=jdbcTemplate.queryForInt(sql);
			return count;
		}
	
		
		/**
		 * 获取用户名下的所有场所
		 * @param userId
		 * @param curPage
		 * @param pageSize
		 * @return
		 */
		@SuppressWarnings({ "unchecked", "rawtypes" })
		public AjaxPageBean getUserSiteListInfo(int userId,int curPage,int pageSize){
			AjaxPageBean ab=null;
			String sql="select m.id,max(m.site_name)site_name ,m.state,max(m.address)address, "+
						"max(m.is_probative)is_probative,max(m.allow_client_num)allow_client_num,max(m.create_time)create_time,count(m.mac)mac_num,group_concat(m.mac separator ',')macs from ( "+
						"select a.id,a.site_name,a.address,a.is_probative,a.allow_client_num,a.state,a.create_time,b.mac from t_cloud_site a LEFT JOIN t_cloud_site_routers b on a.id=b.site_id "+
						"where a.user_id="+userId+" order by a.create_time desc "+
						") m GROUP BY m.id ";
			try {
		        ab=PagingFactory.getPageNationResultList(jdbcTemplate,new BeanPropertyRowMapper<SiteInfoBean>(SiteInfoBean.class), sql, curPage, pageSize);
		        StringBuffer sb=new StringBuffer();
		        for(int i=0;i<ab.getData().size();i++){
		        	SiteInfoBean sib=(SiteInfoBean) ab.getData().get(i);
		        	sb.append(sib.getId()).append(",");
		        }
		        
		        if(sb.length()>0){
			        String in=sb.substring(0, sb.length()-1);
			        String portalNumSQL="select a.site_id,count(a.portal_user_id) p_num from t_site_customer_info a where a.site_id in ("+in+") group by a.site_id ";
			        List<Map<String, Object>> result= jdbcTemplate.queryForList(portalNumSQL);
			        if(result.size()>0){
			        	for(int i=0;i<ab.getData().size();i++){
				        	SiteInfoBean sib=(SiteInfoBean) ab.getData().get(i);
				        	for(int j=0;j<result.size();j++){
				        		int n=Integer.parseInt(result.get(j).get("site_id")+"");
				        		if(sib.getId()==n){
				        			sib.setPortalUserNum(Long.parseLong((result.get(j).get("p_num")==null?0:result.get(j).get("p_num"))+""));
				        		}
				        	}
				        }
			        }
			        List<SiteInfoBean> list = new ArrayList();
			        for(int i=0;i<ab.getData().size();i++){
			        	SiteInfoBean sib=(SiteInfoBean) ab.getData().get(i);
			        	sib.setCreate_time(getOnlineNum((sib.getId()+"").trim())+"");
			        	//sib.setMacs(getTryNum((sib.getId()+"").trim())+"");
			        	list.add(sib);
					}
			        ab.setData(list);
		        }
		        if(ab.getData().size()>0&&ab.getData()!=null){
		        	for (int i = 0; i <ab.getData().size(); i++) {
		        		SiteInfoBean bean = (SiteInfoBean)ab.getData().get(i);
		        		int siteId = bean.getId();
		        		AjaxPageBean apb = getDevice(siteId,userId,1,500);
		        		if(apb.getData().size()>0&&apb.getData()!=null){
		        			for (int j = 0; j <apb.getData().size(); j++) {
		        				RouterInfoBean rb = (RouterInfoBean)apb.getData().get(j);
		        				if(!"正常".equals(rb.getStatue())){
		        					bean.setYiChang("ok");
		        					break;
		        				}
							}
		        		}
		        	}
		        }
		        return ab;
			}catch (Exception e) {
				log.error(this.getClass().getCanonicalName(), e);	        
		        return ab;
		    }
		}

		/**
		 * 检查设备是否可以绑定
		 * @param mac
		 * @return 0可以绑定。1设备不在线，2设备不能绑定,3系统没有这个设备
		 */
		public int isDeviceReady(String mac,String macAddress){
		String sql = "select b.mac,b.authcount,b.install_position,b.ssid,b.startup_time,b.version,"
				+ "b.homeurl,b.auth_status,b.interval_time,b.last_time from v1_store_router b "
				+ "where b.mac=?";

		List<RouterInfoBean> list = templJdbcTemplate
				.query(sql, new Object[] { mac },
						new BeanPropertyRowMapper<RouterInfoBean>(
								RouterInfoBean.class));
		if (list == null || list.size() == 0) {
			return 3;
		}
		boolean b = list.get(0).isOnline();

		CloudSiteRouters csr = nutDao.fetch(CloudSiteRouters.class,
				Cnd.where("mac", "=", mac));
        
		if (b) {// 设备在线
			if (csr != null) {// 设备不能绑定
				return 2;
			} else
				//更改mac所在的位置
			    templJdbcTemplate.update("UPDATE v1_store_router SET install_position = ? WHERE mac = ?",new Object[]{macAddress,mac});
				return 0;
		} else
			return 1;
		}
		
		/**
		 * 绑定设备
		 * @param userId
		 * @param mac
		 * @return
		 */
		public boolean bindDeviceToUser(int siteId,String mac){
			//找到设备
//			StoreRouter sr=templNutDao.fetch(StoreRouter.class, Cnd.where("mac", "=", mac));
			
			
			CloudSiteRouters ur=nutDao.fetch(CloudSiteRouters.class, Cnd.where("siteId", "=", siteId).and("mac", "=", mac));
			
			if(ur==null){
				ur=new CloudSiteRouters();
				ur.setSiteId(siteId);
				ur.setMac(mac.toUpperCase());
				ur=nutDao.insert(ur);
			}
			
			return ur==null?false:ur.getId()>0;
		}
		
		/**
		 * 绑定设备 
		 * 重载 by:cuimiao
		 * 该方法向t_cloud_site_routers表和radgroupreply表中插入数据
		 * @param userId
		 * @param mac
		 * @return
		 */
		public boolean bindDeviceToUser(CloudSiteRouters router,String maxUpSpeed ,String maxDownSpeed){
			//找到设备
//			StoreRouter sr=templNutDao.fetch(StoreRouter.class, Cnd.where("mac", "=", mac));
			
			//插入操作：t_cloud_site_routers
			CloudSiteRouters ur=nutDao.fetch(CloudSiteRouters.class, Cnd.where("siteId", "=", router.getSiteId()).and("mac", "=", router.getMac()));
			
			if(ur==null){
				ur=new CloudSiteRouters();
				ur.setSiteId(router.getSiteId());
				ur.setMac(router.getMac().toUpperCase());
				ur.setIp(router.getIp());
				ur.setRouterType(router.getRouterType());
				ur.setSecretKey(router.getSecretKey());
				ur=nutDao.insert(ur);
			}
			
			if(ur==null?false:ur.getId()>0 && !"wifidog".equals(router.getRouterType())){
				/**操作radgroupreply进行限速配置*/
				//查询上传 t2_router_type的router_attribute，router_op
				StringBuffer sqlSelectUp = new StringBuffer();
				sqlSelectUp.append(" SELECT ");
				sqlSelectUp.append(" router_attribute,router_op");
				sqlSelectUp.append(" FROM billingcloud.t2_router_type");
				sqlSelectUp.append(" where router_type = ? ");
				sqlSelectUp.append(" and router_attribute_name = 'max_up_speed'");
				List<Map<String, Object>> mapUp = new ArrayList<Map<String, Object>>();
				try{
					mapUp = jdbcTemplate.queryForList(sqlSelectUp.toString(), new Object[]{router.getRouterType()});
				}catch(Exception e){
					e.printStackTrace();
				}
				
				
				//查询下载 t2_router_type的router_attribute，router_op
				StringBuffer sqlSelectDown = new StringBuffer();
				sqlSelectDown.append(" SELECT ");
				sqlSelectDown.append(" router_attribute,router_op");
				sqlSelectDown.append(" FROM billingcloud.t2_router_type");
				sqlSelectDown.append(" where router_type = ? ");
				sqlSelectDown.append(" and router_attribute_name = 'max_down_speed'");
				List<Map<String, Object>> mapDown = new ArrayList<Map<String, Object>>();
				try{
					mapDown = jdbcTemplate.queryForList(sqlSelectDown.toString(), new Object[]{router.getRouterType()});
				}catch(Exception e){
					e.printStackTrace();
				}
				
				//插入上传：radgroupreply 隐患：没有事务处理
				StringBuffer sqlInsertUp = new StringBuffer();
				sqlInsertUp.append(" insert into ");
				sqlInsertUp.append(" radgroupreply(groupname,attribute,op,value)");
				sqlInsertUp.append(" values(?,?,?,?)");
				try{
					jdbcTemplate.update(sqlInsertUp.toString(),
							new Object[]{router.getMac(),mapUp.get(0).get("router_attribute"),mapUp.get(0).get("router_op"),maxUpSpeed});
				}catch(Exception e){
					e.printStackTrace();
				}
				
				
				//插入下载：radgroupreply 隐患：没有事务处理
				StringBuffer sqlInsertDown = new StringBuffer();
				sqlInsertDown.append(" insert into ");
				sqlInsertDown.append(" radgroupreply(groupname,attribute,op,value)");
				sqlInsertDown.append(" values(?,?,?,?)");
				try{
					jdbcTemplate.update(sqlInsertDown.toString(),
							new Object[]{router.getMac(),mapDown.get(0).get("router_attribute"),mapDown.get(0).get("router_op"),maxDownSpeed});
				}catch(Exception e){
					e.printStackTrace();
				}
				
				//小辣椒coovachilli 情况向radgroupcheck插入一条数据  Simultaneous-Use
				if("coovachilli".equals(router.getRouterType())){
					StringBuffer sqlInsertUse = new StringBuffer();
					sqlInsertUse.append(" insert into ");
					sqlInsertUse.append(" radgroupcheck(groupname,attribute,op,value)");
					sqlInsertUse.append(" values(?,?,?,?)");
					try{
						jdbcTemplate.update(sqlInsertUse.toString(),
								new Object[]{router.getMac(),"Simultaneous-Use",mapDown.get(0).get("router_op"),"1"});
					}catch(Exception e){
						e.printStackTrace();
					}
				}
				
			}
			
			return ur==null?false:ur.getId()>0;//绑定路由操作成功视为该操作执行成功
		}
		
		/**
		 * 返回设备信息
		 * @param sitesid
		 * @return
		 */
		public AjaxPageBean getDevice(int siteId,int userid,int curPage,int pageSize){
			AjaxPageBean ab=new AjaxPageBean(201);
			String sql="select b.mac   from t_cloud_site a INNER JOIN t_cloud_site_routers b on a.id=b.site_id WHERE a.user_id= ? and b.site_id=? ";
			Object [] params={userid,siteId};
			AjaxPageBean ab2=new AjaxPageBean(201); 
			List<RouterInfoBean>list=null;
			try {
				ab2 = PagingFactory.getPageNationResultList(jdbcTemplate, params, new BeanPropertyRowMapper<RouterInfoBean>(RouterInfoBean.class), sql, curPage, pageSize);
				list=ab2.getData();
			} catch (Exception e1) {
				ab2.setCode(201);				
				e1.printStackTrace();
				return ab2;
			}
			if(list.size()==0){ //如果没有查到mac信息返回
				return ab2;
			}
			StringBuffer str=new StringBuffer();
			for(int i=0;i<list.size();i++){
				str.append("'"+list.get(i).getMac()+"',");
			}
			//截取最后一个 , 号 用来拼接条件
			String str1= str.toString().substring(0, str.toString().lastIndexOf(","));
			String sql2="select mac,authcount,install_position,ssid,startup_time,version,"
					+ "homeurl,auth_status,interval_time,last_time from v1_store_router "
					+ "WHERE mac in("+str1+")";
				List<Map<String, Object>> queryList = templJdbcTemplate.queryForList(sql2);
				List<RouterInfoBean> infoList=new ArrayList<RouterInfoBean>();
				for(int i=0;i<queryList.size();i++){
					RouterInfoBean  info=new RouterInfoBean();
					info=Lang.map2Object(queryList.get(i),RouterInfoBean.class);
					Long nowtime =info.getLast_time().getTime()-info.getStartup_time().getTime();
					String time = "";
					if(nowtime<=0){
						time = "0天0小时1分";
					}else{
						Long day = (nowtime) / (3600 * 24 * 1000);
						Long hour = (nowtime) / (3600 * 1000);
						hour %= 24;
						Long fen = (nowtime) / (60 * 1000);
						fen %=60;
						time = String.valueOf(day)+"天"+String.valueOf(hour)+"小时"+String.valueOf(fen)+"分";
					}
					info.setHomeurl(time);
					infoList.add(info);
				}
				ab2.setCode(200);
		        for(int i=0;i<ab2.getData().size();i++){
		        	RouterInfoBean rb=(RouterInfoBean) ab2.getData().get(i);
		        	for(int j=0;j<infoList.size();j++){
		        		if(rb.getMac().equalsIgnoreCase(infoList.get(j).getMac())){
		        			rb.copyValue(infoList.get(j));//替换分页Data
		        		}
		        	}
		        	rb.handleSelf();
		        }
			return ab2;
		}
		/**
		 * 获得场所列表总页数
		 * @param pageSize
		 * @param userId
		 * @return
		 */
		public int getTotalPage(int pageSize, int userId) {
			String sql = "SELECT COUNT(*) from (select m.id,max(m.site_name)site_name ,max(m.address)address, "
					+ "max(m.is_probative)is_probative,max(m.allow_client_num)allow_client_num,max(m.create_time)create_time,count(m.mac)mac_num,group_concat(m.mac separator ',')macs from ( "
					+ "select a.id,a.site_name,a.address,a.is_probative,a.allow_client_num,a.create_time,b.mac from t_cloud_site a LEFT JOIN t_cloud_site_routers b on a.id=b.site_id "
					+ "where a.user_id="
					+ userId
					+ " order by a.create_time desc "
					+ ") m GROUP BY m.id) k";
			long count = jdbcTemplate.queryForObject(sql, Long.class);
			int totalCount = Integer.valueOf((count + "").trim());
			int totalPageNum = (totalCount % pageSize) > 0 ? (totalCount / pageSize + 1)
					: totalCount / pageSize;
			return totalPageNum;
		}
		/**
		 * 获得设备信息总页数
		 * @param pageSize
		 * @param userId
		 * @param siteId
		 * @return
		 */
		public int  getDeviceInfoTotalPage(int pageSize,int userId,String siteId){
			try {
				String sql="select b.mac mac from t_cloud_site a INNER JOIN t_cloud_site_routers b on a.id=b.site_id WHERE a.user_id= ? and b.site_id=? ";
				Object [] params={userId,siteId};
				List<Map<String,Object>> list = jdbcTemplate.queryForList(sql,params);
				StringBuffer str = new StringBuffer();
				int totalPageNum = 1;
				if(list.size()>0&&list!=null){
					for(int i=0;i<list.size();i++){
						String mac = String.valueOf(list.get(i).get("mac")+"");
						if(!("".equals(mac))&&mac!=null){
							str.append("'"+mac+"',");
						}else{
							return 1;
						}
					}
					String str1= str.toString().substring(0, str.toString().lastIndexOf(","));
					String sql2="select COUNT(mac) from v1_store_router "
							+ "WHERE mac in("+str1+")";
					long count = templJdbcTemplate.queryForObject(sql2, Long.class);
					if(count==0){
						return 1;
					}
					int totalCount = Integer.valueOf((count + "").trim());
					totalPageNum = (totalCount % pageSize) > 0 ? (totalCount / pageSize + 1) : totalCount / pageSize;
			     	}
				   return totalPageNum;
			    } catch (Exception e) {
				 log.error("设备总页数异常"+e);
				 return 1;
			    }
		}
		/**
		 * 修改场所名字 
		 * @param siteId
		 * @return
		 */
		public boolean updateSiteName(final String siteName,final String siteId){
			try {
		        Trans.exec(new Atom(){
		            public void run() {
		            	String sql ="UPDATE t_cloud_site SET site_name = ? WHERE id = ?";
		    			jdbcTemplate.update(sql,new Object[]{siteName,siteId});
		            }
		        });
		        return true;
	        }catch (Exception e) {
	        	log.error("update t_cloud_site siteName 事务报错--", e);
	        	return false;
	        }
			
		}
		
		/**
		 * 修改场所地址
		 * @param siteId
		 * @return
		 */
		public boolean updateSiteAddress(final String siteAddress,final String siteId){
			try {
		        Trans.exec(new Atom(){
		            public void run() {
		            	String sql ="UPDATE t_cloud_site SET address = ?  WHERE id=?";
		    			jdbcTemplate.update(sql,new Object[]{siteAddress,siteId});
		            }
		        });
		        return true;
	        }catch (Exception e) {
	        	log.error("update t_cloud_site siteName 事务报错--", e);
	        	return false;
	        }
		}
		/**
		 * 修改试用开关
		 * @param siteId
		 * @return
		 */
		public boolean updateSiteTrySwitch(final Integer switchState,final String siteId){
			try {
		        Trans.exec(new Atom(){
		            public void run() {
		            	String sql ="UPDATE t_cloud_site SET is_probative = ? WHERE id = ?";
		    			jdbcTemplate.update(sql,new Object[]{switchState,siteId});
		            }
		        });
		        return true;
	        }catch (Exception e) {
	        	log.error("update t_cloud_site TrySwitch 事务报错--", e);
	        	return false;
	        }
		}
		
		/**
		 * 获得在线人数
		 * @param siteId
		 * @return
		 */
		public int getOnlineNum(String siteId){
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			String tablename = "v1_portal_" + sdf.format(new java.util.Date());
			String sql = "SELECT count(DISTINCT mac) count from " + tablename
					+ " where   Logout_time is null AND Store_id=?";
			String table = "select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_NAME='"
					+ tablename + "'";
			List<String> isTable = templJdbcTemplate.queryForList(table,
					String.class);
			int online = 0;
			if (isTable != null && isTable.size() != 0) {
				List<Map<String, Object>> onlines = templJdbcTemplate.queryForList(sql, new Object[] { siteId });
				try {
					if (onlines.size() > 0 && onlines != null&& onlines.get(0).get("count") != null&& !("".equals(onlines.get(0).get("count")))) {
						online = Integer.valueOf(onlines.get(0).get("count") + "");
					} else {
						online = 0;
					}
					return online;
				} catch (Exception e) {
					log.error(this.getClass().getCanonicalName(), e);
					return 0;
				}
			} else {
				return 0;
			}
		}
//		/**
//		 * 获得实名认证
//		 * @param siteId
//		 * @return 
//		 */
//		@SuppressWarnings({ "deprecation" })
//		public int getTryNum(String siteId){
//			String sqla = "SELECT COUNT(DISTINCT mac) count from t_portal_user_trial_records WHERE site_id = ?";
//			int tryCount = 0;
//			try {
//				tryCount = jdbcTemplate.queryForInt(sqla, new Object[] { siteId });
//				return tryCount;
//			} catch (Exception e) {
//				log.error(this.getClass().getCanonicalName(), e);
//				return tryCount;
//			}
//		}
		
		/**
		 * 修改允许终端登录数量
		 * @param siteId
		 * @return
		 */
		public boolean updateAllowMacNum(final Integer macNum,final String siteId){
			try {
		        Trans.exec(new Atom(){
		            public void run() {
		            	String sql ="UPDATE t_cloud_site SET allow_client_num = ?  WHERE id=?";
		    			jdbcTemplate.update(sql,new Object[]{macNum,siteId});
		            }
		        });
		        return true;
	        }catch (Exception e) {
	        	log.error("update t_cloud_site TrySwitch 事务报错--", e);
	        	return false;
	        }
		}
		
		/**
		 * 删除设备异常的设备
		 * @param siteId
		 * @return
		 */
		public boolean deleteErrorDevice(final String mac){
			try {
		        Trans.exec(new Atom(){
		            public void run() {
		            	String sql ="DELETE FROM t_cloud_site_routers WHERE mac=?";
		    			jdbcTemplate.update(sql,new Object[]{mac});
		    			
		    			String sql2 ="DELETE FROM v1_store_router  WHERE mac =?";
		    			templJdbcTemplate.update(sql2,new Object[]{mac});
		    			
		    			//删除设备相关配置（4.1.1版主要针对于爱快和小辣椒的配置） by:cuimiao
		    			//通用配置（小辣椒和爱快）
		    			String sqlCommon = "delete from radgroupreply where groupname = ?";
		    			jdbcTemplate.update(sqlCommon,new Object[]{mac});
		    			//小辣椒配置
		    			String sqlCoova = "delete from radgroupcheck where groupname = ?";
		    			jdbcTemplate.update(sqlCoova,new Object[]{mac});
		            }
		        });
		        return true;
	        }catch (Exception e) {
	        	log.error("删除设备异常的设备 事务报错--", e);
	        	return false;
	        }
		}
		/**
		 * 修改认证开关
		 * @param siteId
		 * @return
		 */
		public boolean updateAuthSwith(final Integer anthState,final String mac){
			try {
		         String sql2 =" UPDATE v1_store_router SET auth_status=? WHERE mac = ?";
		    	 templJdbcTemplate.update(sql2,new Object[]{anthState,mac});
		         return true;
	        }catch (Exception e) {
	        	log.error("删除设备异常的设备 事务报错--", e);
	        	return false;
	        }
		}
		/**
		 * 获得mac白名单
		 * @param mac
		 * @return
		 */
		public List<String> getWhiteList(String mac){
		try {
			List<String> macList = new ArrayList<String>();
			StoreRouter storeRouter = templNutDao.fetch(StoreRouter.class,
					Cnd.where("mac", "=", mac));
			if (storeRouter!=null) {
				String trustedmac = storeRouter.getTrustedmac();
				if(trustedmac!=null&&!"".equals(trustedmac)){
					String[] macs = trustedmac.split(",");
					for (int i = 0; i < macs.length; i++) {
						macList.add(macs[i]);
					}
					return macList;
				}
			}
		} catch (Exception e) {
			return null;
		}
		return null;
	}
		/**
		 * 移除设备下的mac白名单
		 * @param mac
		 * @param deleteMac
		 * @return true , false
		 */
		@SuppressWarnings("unused")
		public boolean deleteMacList(String mac,String deleteMac){
			
			
			List<String> list = getWhiteList(mac);
			if(list!=null){
			 for (int i = 0; i <list.size(); i++) {
				if(list.get(i).trim().equals(deleteMac.trim())){
					list.remove(i);
				}
			  }
			 if(list!=null&&list.size()>0){
				 StringBuffer sb = new StringBuffer();
				 for (int i = 0; i < list.size(); i++) {
					 sb.append(list.get(i)).append(",");
				 }
				 String sql = "UPDATE v1_store_router SET trustedmac =? WHERE mac = ?";
				 templJdbcTemplate.update(sql,new Object[]{sb.toString(),mac});
				 return true;
			 }else{
				 String sqls = "UPDATE v1_store_router SET trustedmac =? WHERE mac = ?";
				 templJdbcTemplate.update(sqls,new Object[]{"",mac});
				 return true;
			 }
			} 
			return false;
		  }
		/**
		 * 添加设备mac白名单
		 * @param mac
		 * @param addMacs  传入的格式时2sdfs,sdfs,asdf,asdf,adf 批量操作 
		 * @return
		 */
		@SuppressWarnings("unchecked")
		public boolean addMacList(String mac,String addMacs){
			boolean flag = false;
			List<String> macs = getWhiteList(mac);
			if(macs!=null){
				StringBuffer sd = new StringBuffer();
				for (int i = 0; i < macs.size(); i++) {
					sd.append(macs.get(i));
				}
				//获得后台的白名单
				String bj = sd.toString();
				//获得前端传过来的mac
				String qj = addMacs.replace(",","");
				if(bj.equals(qj)){
					return false;
				}
			}
			if(macs!=null){
				Set set = new HashSet();
				StringBuffer sb = new StringBuffer();
				String[] addMac = addMacs.trim().split(",");
				for (int j = 0; j < addMac.length; j++) {
			     	 set.add(addMac[j].trim());
				}
				 for (int i = 0; i < macs.size(); i++) {
					 set.add(macs.get(i).trim());
				}
				 for (Object str : set) {  
					 sb.append((str+"").trim()).append(",");
				}  
				 String sql = "UPDATE v1_store_router SET trustedmac =? WHERE mac = ?";
				 templJdbcTemplate.update(sql,new Object[]{sb.toString(),mac});
				 flag =  true;
			}else{
				 String sqls = "UPDATE v1_store_router SET trustedmac =? WHERE mac = ?";
				 templJdbcTemplate.update(sqls,new Object[]{addMacs+",",mac});
			     flag =  true;
			}
			return flag;
		}
		/**
		 * 根据id查询场所是否存在
		 * @param id
		 * @return
		 */
		public CloudSite getCloudSiteById(int id){
			CloudSite c=nutDao.fetch(CloudSite.class,Cnd.where("id","=",id));
			return c;
		}
		/**
		 * 修改场所实名认证开关
		 * @param id
		 * @param state
		 * @return
		 */
		public int updateRealNameSwitch(final int id,final int state){
			try {
				Trans.exec(new Atom() {
					public void run() {
						CloudSite c=getCloudSiteById(id);
						c.setState(state);
						nutDao.update(c);
					}
				});
				return 1;
			} catch (Exception e) {
				log.error("修改实名认证开关失败");
				return 0;
			}
			
		} 
	/**
	 * 
	 * @Description  修改场所信息
	 * @date 2016年5月24日上午8:57:49
	 * @author guoyingjie
	 * @param site
	 */
    public void updateSiteInfo(int siteId,int userId,String url,String siteName,String address,int siteNum){
    	try {
    		CloudSite site = getCloudSiteById(siteId);
    		if(url!=null){
    			site.setBannerUrl(url);
    		}
    		site.setUser_id(userId);
    		site.setAddress(address);
    		site.setSite_name(siteName);
    		site.setSiteNum(siteNum);
			nutDao.update(site);
		} catch (Exception e) {
			log.error("修改场所信息失败");
		}
    }
    
    /**
	 * @Description  上传bannerurl到服务器并获得拼接url
	 * @date 2016年5月25日下午1:24:08
	 * @author guoyingjie
	 * @param baseone 文件名或者字符流
	 * @param baseTwo  文件名或者字符流
	 * @param baseThress  文件名或者字符流
	 * @return
	 */
    public static String bannerurl(String baseone,String baseTwo,String baseThress,int siteId){
    	InputStream one=null;
		InputStream two=null;
		InputStream thress=null;
		String onename = null;
		String twoname = null;
		String thressname = null;
		List<InputStream> stream = new ArrayList<InputStream>();
		List<String> name = new ArrayList<String>();
		StringBuilder sb = new StringBuilder();
		if(baseone.indexOf("base64")>-1){//说明这个是经过前端编译的base64的字符串
			one = getInputStream(baseone);
			stream.add(one);
		}else{
			onename = baseone;
			name.add(onename);
		}
        if(baseTwo.indexOf("base64")>-1){//说明这个是经过前端编译的base64的字符串
        	two = getInputStream(baseTwo);
        	stream.add(two);
		}else{
			twoname = baseTwo;
			name.add(twoname);
		}
        if(baseThress.indexOf("base64")>-1){//说明这个是经过前端编译的base64的字符串
        	thress = getInputStream(baseThress);
        	stream.add(thress);
        }else{
        	thressname = baseThress;
        	name.add(thressname);
        }
        OssManage oss = new OssManage();
		if(stream.size()>0&&stream!=null){
			for (int i = 0; i < stream.size(); i++) {
				//处理上传图片的
				String filename = "school_pic/"+siteId+"/"+randCode()+".jpg";
				try {
					oss.uploadFile(stream.get(i), filename, "image/jpeg");
					sb.append(filename).append(",");
				} catch (Exception e) {
				}
			}
		}
		if(name.size()>0&&name!=null){
			for (int i = 0; i <name.size(); i++) {
				sb.append(name.get(i)).append(",");
			}
		}
	     return sb.toString();
    }
   
    
   /**
    * @Description 将传过来的base64转化为图片流
    * @date 2016年5月24日上午9:06:45
    * @author guoyingjie
    * @param base64String
    * @return
    */
	public static InputStream getInputStream(String base64String){
		InputStream in = null;
		if(base64String!=null&&!"".equals(base64String)){
			String formateStr = base64String.substring(base64String.indexOf("base64")+7);
			BASE64Decoder decoder = new BASE64Decoder();
	        try {
	            // Base64解码
	            byte[] bytes = decoder.decodeBuffer(formateStr);
	            for (int i = 0; i < bytes.length; ++i) {
	                if (bytes[i] < 0) {// 调整异常数据
	                    bytes[i] += 256;
	                }
	            }
	            in = new ByteArrayInputStream(bytes);
	        } catch (Exception e) {
	        	log.error("获得图片流失败",e);
	        }
		} 
		return in;
	}
	/**
	 * 生成十二位随机数
	 */
	public static String randCode() {
		String code = "";
		for (int i = 0; i < 3; i++) {
			Random rand = new Random();
			code += rand.nextInt(9);
		}
		return code.trim()+new Date().getTime();
	}
    
}
